<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0066)http://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html -->
<HTML lang=en><HEAD><TITLE>C++ Dialect Options - Using the GNU Compiler Collection (GCC)</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="Using the GNU Compiler Collection (GCC)" name=description>
<META content="MSHTML 6.00.2900.2873" name=GENERATOR><LINK title=Top 
href="index.html#Top" rel=start><LINK title="Invoking GCC" 
href="Invoking-GCC.html#Invoking-GCC" rel=up><LINK title="C Dialect Options" 
href="C-Dialect-Options.html#C-Dialect-Options" rel=prev><LINK 
title="Objective-C and Objective-C++ Dialect Options" 
href="Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" 
rel=next><LINK title="Texinfo Homepage" 
href="http://www.gnu.org/software/texinfo/" rel=generator-home><!--
Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU General Public License'' and ``Funding
Free Software'', the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled ``GNU Free Documentation License''.

(a) The FSF's Front-Cover Text is:

     A GNU Manual

(b) The FSF's Back-Cover Text is:

     You have freedom to copy and modify this GNU Manual, like GNU
     software.  Copies published by the Free Software Foundation raise
     funds for GNU development.-->
<META http-equiv=Content-Style-Type content=text/css>
<STYLE type=text/css>PRE.display {
	FONT-FAMILY: inherit
}
PRE.format {
	FONT-FAMILY: inherit
}
PRE.smalldisplay {
	FONT-SIZE: smaller; FONT-FAMILY: inherit
}
PRE.smallformat {
	FONT-SIZE: smaller; FONT-FAMILY: inherit
}
PRE.smallexample {
	FONT-SIZE: smaller
}
PRE.smalllisp {
	FONT-SIZE: smaller
}
SPAN.sc {
	FONT-VARIANT: small-caps
}
SPAN.roman {
	FONT-WEIGHT: normal; FONT-FAMILY: serif
}
SPAN.sansserif {
	FONT-WEIGHT: normal; FONT-FAMILY: sans-serif
}
</STYLE>
</HEAD>
<BODY>
<DIV class=node>
<P><A name=C++-Dialect-Options></A><A 
name=C_002b_002b-Dialect-Options></A>Next:&nbsp;<A accessKey=n 
href="http://gcc.gnu.org/onlinedocs/gcc/Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options" 
rel=next>Objective-C and Objective-C++ Dialect Options</A>, Previous:&nbsp;<A 
accessKey=p 
href="http://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#C-Dialect-Options" 
rel=previous>C Dialect Options</A>, Up:&nbsp;<A accessKey=u 
href="http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC" 
rel=up>Invoking GCC</A> 
<HR>
</DIV>
<H3 class=section>3.5 Options Controlling C++ Dialect</H3>
<P><A name=index-compiler-options_002c-C_002b_002b-120></A><A 
name=index-C_002b_002b-options_002c-command-line-121></A><A 
name=index-options_002c-C_002b_002b-122></A>This section describes the 
command-line options that are only meaningful for C++ programs; but you can also 
use most of the GNU compiler options regardless of what language your program is 
in. For example, you might compile a file <CODE>firstClass.C</CODE> like this: <PRE class=smallexample>     g++ -g -frepo -O -c firstClass.C
</PRE>
<P class=noindent>In this example, only <SAMP><SPAN 
class=option>-frepo</SPAN></SAMP> is an option meant only for C++ programs; you 
can use the other options with any language supported by GCC. 
<P>Here is a list of options that are <EM>only</EM> for compiling C++ programs: 
<DL>
  <DT><CODE>-fabi-version=</CODE><VAR>n</VAR>
  <DD><A name=index-fabi_002dversion-123></A>Use version <VAR>n</VAR> of the C++ 
  ABI. Version 2 is the version of the C++ ABI that first appeared in G++ 3.4. 
  Version 1 is the version of the C++ ABI that first appeared in G++ 3.2. 
  Version 0 will always be the version that conforms most closely to the C++ ABI 
  specification. Therefore, the ABI obtained using version 0 will change as ABI 
  bugs are fixed. 
  <P>The default is version 2. <BR></P>
  <DT><CODE>-fno-access-control</CODE>
  <DD><A name=index-fno_002daccess_002dcontrol-124></A>Turn off all access 
  checking. This switch is mainly useful for working around bugs in the access 
  control code. <BR>
  <DT><CODE>-fcheck-new</CODE>
  <DD><A name=index-fcheck_002dnew-125></A>Check that the pointer returned by 
  <CODE>operator new</CODE> is non-null before attempting to modify the storage 
  allocated. This check is normally unnecessary because the C++ standard 
  specifies that <CODE>operator new</CODE> will only return <CODE>0</CODE> if it 
  is declared `<SAMP><SPAN class=samp>throw()</SPAN></SAMP>', in which case the 
  compiler will always check the return value even without this option. In all 
  other cases, when <CODE>operator new</CODE> has a non-empty exception 
  specification, memory exhaustion is signalled by throwing 
  <CODE>std::bad_alloc</CODE>. See also `<SAMP><SPAN class=samp>new 
  (nothrow)</SPAN></SAMP>'. <BR>
  <DT><CODE>-fconserve-space</CODE>
  <DD><A name=index-fconserve_002dspace-126></A>Put uninitialized or 
  runtime-initialized global variables into the common segment, as C does. This 
  saves space in the executable at the cost of not diagnosing duplicate 
  definitions. If you compile with this flag and your program mysteriously 
  crashes after <CODE>main()</CODE> has completed, you may have an object that 
  is being destroyed twice because two definitions were merged. 
  <P>This option is no longer useful on most targets, now that support has been 
  added for putting variables into BSS without making them common. <BR></P>
  <DT><CODE>-ffriend-injection</CODE>
  <DD><A name=index-ffriend_002dinjection-127></A>Inject friend functions into 
  the enclosing namespace, so that they are visible outside the scope of the 
  class in which they are declared. Friend functions were documented to work 
  this way in the old Annotated C++ Reference Manual, and versions of G++ before 
  4.1 always worked that way. However, in ISO C++ a friend function which is not 
  declared in an enclosing scope can only be found using argument dependent 
  lookup. This option causes friends to be injected as they were in earlier 
  releases. 
  <P>This option is for compatibility, and may be removed in a future release of 
  G++. <BR></P>
  <DT><CODE>-fno-elide-constructors</CODE>
  <DD><A name=index-fno_002delide_002dconstructors-128></A>The C++ standard 
  allows an implementation to omit creating a temporary which is only used to 
  initialize another object of the same type. Specifying this option disables 
  that optimization, and forces G++ to call the copy constructor in all cases. 
  <BR>
  <DT><CODE>-fno-enforce-eh-specs</CODE>
  <DD><A name=index-fno_002denforce_002deh_002dspecs-129></A>Don't generate code 
  to check for violation of exception specifications at runtime. This option 
  violates the C++ standard, but may be useful for reducing code size in 
  production builds, much like defining `<SAMP><SPAN 
  class=samp>NDEBUG</SPAN></SAMP>'. This does not give user code permission to 
  throw exceptions in violation of the exception specifications; the compiler 
  will still optimize based on the specifications, so throwing an unexpected 
  exception will result in undefined behavior. <BR>
  <DT><CODE>-ffor-scope</CODE>
  <DT><CODE>-fno-for-scope</CODE>
  <DD><A name=index-ffor_002dscope-130></A><A 
  name=index-fno_002dfor_002dscope-131></A>If <SAMP><SPAN 
  class=option>-ffor-scope</SPAN></SAMP> is specified, the scope of variables 
  declared in a <I>for-init-statement</I> is limited to the `<SAMP><SPAN 
  class=samp>for</SPAN></SAMP>' loop itself, as specified by the C++ standard. 
  If <SAMP><SPAN class=option>-fno-for-scope</SPAN></SAMP> is specified, the 
  scope of variables declared in a <I>for-init-statement</I> extends to the end 
  of the enclosing scope, as was the case in old versions of G++, and other 
  (traditional) implementations of C++. 
  <P>The default if neither flag is given to follow the standard, but to allow 
  and give a warning for old-style code that would otherwise be invalid, or have 
  different behavior. <BR></P>
  <DT><CODE>-fno-gnu-keywords</CODE>
  <DD><A name=index-fno_002dgnu_002dkeywords-132></A>Do not recognize 
  <CODE>typeof</CODE> as a keyword, so that code can use this word as an 
  identifier. You can use the keyword <CODE>__typeof__</CODE> instead. 
  <SAMP><SPAN class=option>-ansi</SPAN></SAMP> implies <SAMP><SPAN 
  class=option>-fno-gnu-keywords</SPAN></SAMP>. <BR>
  <DT><CODE>-fno-implicit-templates</CODE>
  <DD><A name=index-fno_002dimplicit_002dtemplates-133></A>Never emit code for 
  non-inline templates which are instantiated implicitly (i.e. by use); only 
  emit code for explicit instantiations. See <A 
  href="http://gcc.gnu.org/onlinedocs/gcc/Template-Instantiation.html#Template-Instantiation">Template 
  Instantiation</A>, for more information. <BR>
  <DT><CODE>-fno-implicit-inline-templates</CODE>
  <DD><A name=index-fno_002dimplicit_002dinline_002dtemplates-134></A>Don't emit 
  code for implicit instantiations of inline templates, either. The default is 
  to handle inlines differently so that compiles with and without optimization 
  will need the same set of explicit instantiations. <BR>
  <DT><CODE>-fno-implement-inlines</CODE>
  <DD><A name=index-fno_002dimplement_002dinlines-135></A>To save space, do not 
  emit out-of-line copies of inline functions controlled by `<SAMP><SPAN 
  class=samp>#pragma implementation</SPAN></SAMP>'. This will cause linker 
  errors if these functions are not inlined everywhere they are called. <BR>
  <DT><CODE>-fms-extensions</CODE>
  <DD><A name=index-fms_002dextensions-136></A>Disable pedantic warnings about 
  constructs used in MFC, such as implicit int and getting a pointer to member 
  function via non-standard syntax. <BR>
  <DT><CODE>-fno-nonansi-builtins</CODE>
  <DD><A name=index-fno_002dnonansi_002dbuiltins-137></A>Disable built-in 
  declarations of functions that are not mandated by ANSI/ISO C. These include 
  <CODE>ffs</CODE>, <CODE>alloca</CODE>, <CODE>_exit</CODE>, <CODE>index</CODE>, 
  <CODE>bzero</CODE>, <CODE>conjf</CODE>, and other related functions. <BR>
  <DT><CODE>-fno-operator-names</CODE>
  <DD><A name=index-fno_002doperator_002dnames-138></A>Do not treat the operator 
  name keywords <CODE>and</CODE>, <CODE>bitand</CODE>, <CODE>bitor</CODE>, 
  <CODE>compl</CODE>, <CODE>not</CODE>, <CODE>or</CODE> and <CODE>xor</CODE> as 
  synonyms as keywords. <BR>
  <DT><CODE>-fno-optional-diags</CODE>
  <DD><A name=index-fno_002doptional_002ddiags-139></A>Disable diagnostics that 
  the standard says a compiler does not need to issue. Currently, the only such 
  diagnostic issued by G++ is the one for a name having multiple meanings within 
  a class. <BR>
  <DT><CODE>-fpermissive</CODE>
  <DD><A name=index-fpermissive-140></A>Downgrade some diagnostics about 
  nonconformant code from errors to warnings. Thus, using <SAMP><SPAN 
  class=option>-fpermissive</SPAN></SAMP> will allow some nonconforming code to 
  compile. <BR>
  <DT><CODE>-frepo</CODE>
  <DD><A name=index-frepo-141></A>Enable automatic template instantiation at 
  link time. This option also implies <SAMP><SPAN 
  class=option>-fno-implicit-templates</SPAN></SAMP>. See <A 
  href="http://gcc.gnu.org/onlinedocs/gcc/Template-Instantiation.html#Template-Instantiation">Template 
  Instantiation</A>, for more information. <BR>
  <DT><CODE>-fno-rtti</CODE>
  <DD><A name=index-fno_002drtti-142></A>Disable generation of information about 
  every class with virtual functions for use by the C++ runtime type 
  identification features (`<SAMP><SPAN class=samp>dynamic_cast</SPAN></SAMP>' 
  and `<SAMP><SPAN class=samp>typeid</SPAN></SAMP>'). If you don't use those 
  parts of the language, you can save some space by using this flag. Note that 
  exception handling uses the same information, but it will generate it as 
  needed. <BR>
  <DT><CODE>-fstats</CODE>
  <DD><A name=index-fstats-143></A>Emit statistics about front-end processing at 
  the end of the compilation. This information is generally only useful to the 
  G++ development team. <BR>
  <DT><CODE>-ftemplate-depth-</CODE><VAR>n</VAR>
  <DD><A name=index-ftemplate_002ddepth-144></A>Set the maximum instantiation 
  depth for template classes to <VAR>n</VAR>. A limit on the template 
  instantiation depth is needed to detect endless recursions during template 
  class instantiation. ANSI/ISO C++ conforming programs must not rely on a 
  maximum depth greater than 17. <BR>
  <DT><CODE>-fno-threadsafe-statics</CODE>
  <DD><A name=index-fno_002dthreadsafe_002dstatics-145></A>Do not emit the extra 
  code to use the routines specified in the C++ ABI for thread-safe 
  initialization of local statics. You can use this option to reduce code size 
  slightly in code that doesn't need to be thread-safe. <BR>
  <DT><CODE>-fuse-cxa-atexit</CODE>
  <DD><A name=index-fuse_002dcxa_002datexit-146></A>Register destructors for 
  objects with static storage duration with the <CODE>__cxa_atexit</CODE> 
  function rather than the <CODE>atexit</CODE> function. This option is required 
  for fully standards-compliant handling of static destructors, but will only 
  work if your C library supports <CODE>__cxa_atexit</CODE>. <BR>
  <DT><CODE>-fno-use-cxa-get-exception-ptr</CODE>
  <DD><A 
  name=index-fno_002duse_002dcxa_002dget_002dexception_002dptr-147></A>Don't use 
  the <CODE>__cxa_get_exception_ptr</CODE> runtime routine. This will cause 
  <CODE>std::uncaught_exception</CODE> to be incorrect, but is necessary if the 
  runtime routine is not available. <BR>
  <DT><CODE>-fvisibility-inlines-hidden</CODE>
  <DD><A name=index-fvisibility_002dinlines_002dhidden-148></A>This switch 
  declares that the user does not attempt to compare pointers to inline methods 
  where the addresses of the two functions were taken in different shared 
  objects. 
  <P>The effect of this is that GCC may, effectively, mark inline methods with 
  <CODE>__attribute__ ((visibility ("hidden")))</CODE> so that they do not 
  appear in the export table of a DSO and do not require a PLT indirection when 
  used within the DSO. Enabling this option can have a dramatic effect on load 
  and link times of a DSO as it massively reduces the size of the dynamic export 
  table when the library makes heavy use of templates. 
  <P>The behaviour of this switch is not quite the same as marking the methods 
  as hidden directly. Normally if there is a class with default visibility which 
  has a hidden method, the effect of this is that the method must be defined in 
  only one shared object. This switch does not have this restriction. 
  <P>You may mark a method as having a visibility explicitly to negate the 
  effect of the switch for that method. For example, if you do want to compare 
  pointers to a particular inline method, you might mark it as having default 
  visibility. <BR></P>
  <DT><CODE>-fno-weak</CODE>
  <DD><A name=index-fno_002dweak-149></A>Do not use weak symbol support, even if 
  it is provided by the linker. By default, G++ will use weak symbols if they 
  are available. This option exists only for testing, and should not be used by 
  end-users; it will result in inferior code and has no benefits. This option 
  may be removed in a future release of G++. <BR>
  <DT><CODE>-nostdinc++</CODE>
  <DD><A name=index-nostdinc_002b_002b-150></A>Do not search for header files in 
  the standard directories specific to C++, but do still search the other 
  standard directories. (This option is used when building the C++ library.) 
  </DD></DL>
<P>In addition, these optimization, warning, and code generation options have 
meanings only for C++ programs: 
<DL>
  <DT><CODE>-fno-default-inline</CODE>
  <DD><A name=index-fno_002ddefault_002dinline-151></A>Do not assume 
  `<SAMP><SPAN class=samp>inline</SPAN></SAMP>' for functions defined inside a 
  class scope. See <A 
  href="http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html#Optimize-Options">Options 
  That Control Optimization</A>. Note that these functions will have linkage 
  like inline functions; they just won't be inlined by default. <BR>
  <DT><CODE>-Wabi </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wabi-152></A>Warn when G++ generates code that is probably 
  not compatible with the vendor-neutral C++ ABI. Although an effort has been 
  made to warn about all such cases, there are probably some cases that are not 
  warned about, even though G++ is generating incompatible code. There may also 
  be cases where warnings are emitted even though the code that is generated 
  will be compatible. 
  <P>You should rewrite your code to avoid these warnings if you are concerned 
  about the fact that code generated by G++ may not be binary compatible with 
  code generated by other compilers. 
  <P>The known incompatibilities at this point include: 
  <UL>
    <LI>Incorrect handling of tail-padding for bit-fields. G++ may attempt to 
    pack data into the same byte as a base class. For example: <PRE class=smallexample>               struct A { virtual void f(); int f1 : 1; };
               struct B : public A { int f2 : 1; };
          </PRE>
    <P class=noindent>In this case, G++ will place <CODE>B::f2</CODE> into the 
    same byte as<CODE>A::f1</CODE>; other compilers will not. You can avoid this 
    problem by explicitly padding <CODE>A</CODE> so that its size is a multiple 
    of the byte size on your platform; that will cause G++ and other compilers 
    to layout <CODE>B</CODE> identically. </P>
    <LI>Incorrect handling of tail-padding for virtual bases. G++ does not use 
    tail padding when laying out virtual bases. For example: <PRE class=smallexample>               struct A { virtual void f(); char c1; };
               struct B { B(); char c2; };
               struct C : public A, public virtual B {};
          </PRE>
    <P class=noindent>In this case, G++ will not place <CODE>B</CODE> into the 
    tail-padding for <CODE>A</CODE>; other compilers will. You can avoid this 
    problem by explicitly padding <CODE>A</CODE> so that its size is a multiple 
    of its alignment (ignoring virtual base classes); that will cause G++ and 
    other compilers to layout <CODE>C</CODE> identically. </P>
    <LI>Incorrect handling of bit-fields with declared widths greater than that 
    of their underlying types, when the bit-fields appear in a union. For 
    example: <PRE class=smallexample>               union U { int i : 4096; };
          </PRE>
    <P class=noindent>Assuming that an <CODE>int</CODE> does not have 4096 bits, 
    G++ will make the union too small by the number of bits in an 
    <CODE>int</CODE>. </P>
    <LI>Empty classes can be placed at incorrect offsets. For example: <PRE class=smallexample>               struct A {};
               
               struct B {
                 A a;
                 virtual void f ();
               };
               
               struct C : public B, public A {};
          </PRE>
    <P class=noindent>G++ will place the <CODE>A</CODE> base class of 
    <CODE>C</CODE> at a nonzero offset; it should be placed at offset zero. G++ 
    mistakenly believes that the <CODE>A</CODE> data member of <CODE>B</CODE> is 
    already at offset zero. </P>
    <LI>Names of template functions whose types involve <CODE>typename</CODE> or 
    template template parameters can be mangled incorrectly. <PRE class=smallexample>               template &lt;typename Q&gt;
               void f(typename Q::X) {}
               
               template &lt;template &lt;typename&gt; class Q&gt;
               void f(typename Q&lt;int&gt;::X) {}
          </PRE>
    <P class=noindent>Instantiations of these templates may be mangled 
    incorrectly. </P></LI></UL><BR>
  <DT><CODE>-Wctor-dtor-privacy </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wctor_002ddtor_002dprivacy-153></A>Warn when a class seems 
  unusable because all the constructors or destructors in that class are 
  private, and it has neither friends nor public static member functions. <BR>
  <DT><CODE>-Wnon-virtual-dtor </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wnon_002dvirtual_002ddtor-154></A>Warn when a class appears 
  to be polymorphic, thereby requiring a virtual destructor, yet it declares a 
  non-virtual one. This warning is also enabled if -Weffc++ is specified. <BR>
  <DT><CODE>-Wreorder </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wreorder-155></A><A 
  name=index-reordering_002c-warning-156></A><A 
  name=index-warning-for-reordering-of-member-initializers-157></A>Warn when the 
  order of member initializers given in the code does not match the order in 
  which they must be executed. For instance: <PRE class=smallexample>          struct A {
            int i;
            int j;
            A(): j (0), i (1) { }
          };
     </PRE>
  <P>The compiler will rearrange the member initializers for `<SAMP><SPAN 
  class=samp>i</SPAN></SAMP>' and `<SAMP><SPAN class=samp>j</SPAN></SAMP>' to 
  match the declaration order of the members, emitting a warning to that effect. 
  This warning is enabled by <SAMP><SPAN class=option>-Wall</SPAN></SAMP>. 
  </P></DD></DL>
<P>The following <SAMP><SPAN class=option>-W...</SPAN></SAMP> options are not 
affected by <SAMP><SPAN class=option>-Wall</SPAN></SAMP>. 
<DL>
  <DT><CODE>-Weffc++ </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Weffc_002b_002b-158></A>Warn about violations of the 
  following style guidelines from Scott Meyers' <CITE>Effective C++</CITE> book: 

  <UL>
    <LI>Item 11: Define a copy constructor and an assignment operator for 
    classes with dynamically allocated memory. 
    <LI>Item 12: Prefer initialization to assignment in constructors. 
    <LI>Item 14: Make destructors virtual in base classes. 
    <LI>Item 15: Have <CODE>operator=</CODE> return a reference to 
    <CODE>*this</CODE>. 
    <LI>Item 23: Don't try to return a reference when you must return an object. 
    </LI></UL>
  <P>Also warn about violations of the following style guidelines from Scott 
  Meyers' <CITE>More Effective C++</CITE> book: 
  <UL>
    <LI>Item 6: Distinguish between prefix and postfix forms of increment and 
    decrement operators. 
    <LI>Item 7: Never overload <CODE>&amp;&amp;</CODE>, <CODE>||</CODE>, or 
    <CODE>,</CODE>. </LI></UL>
  <P>When selecting this option, be aware that the standard library headers do 
  not obey all of these guidelines; use `<SAMP><SPAN class=samp>grep 
  -v</SPAN></SAMP>' to filter out those warnings. <BR></P>
  <DT><CODE>-Wno-deprecated </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wno_002ddeprecated-159></A>Do not warn about usage of 
  deprecated features. See <A 
  href="http://gcc.gnu.org/onlinedocs/gcc/Deprecated-Features.html#Deprecated-Features">Deprecated 
  Features</A>. <BR>
  <DT><CODE>-Wstrict-null-sentinel </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wstrict_002dnull_002dsentinel-160></A>Warn also about the 
  use of an uncasted <CODE>NULL</CODE> as sentinel. When compiling only with GCC 
  this is a valid sentinel, as <CODE>NULL</CODE> is defined to 
  <CODE>__null</CODE>. Although it is a null pointer constant not a null 
  pointer, it is guaranteed to of the same size as a pointer. But this use is 
  not portable across different compilers. <BR>
  <DT><CODE>-Wno-non-template-friend </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wno_002dnon_002dtemplate_002dfriend-161></A>Disable warnings 
  when non-templatized friend functions are declared within a template. Since 
  the advent of explicit template specification support in G++, if the name of 
  the friend is an unqualified-id (i.e., `<SAMP><SPAN class=samp>friend 
  foo(int)</SPAN></SAMP>'), the C++ language specification demands that the 
  friend declare or define an ordinary, nontemplate function. (Section 14.5.3). 
  Before G++ implemented explicit specification, unqualified-ids could be 
  interpreted as a particular specialization of a templatized function. Because 
  this non-conforming behavior is no longer the default behavior for G++, 
  <SAMP><SPAN class=option>-Wnon-template-friend</SPAN></SAMP> allows the 
  compiler to check existing code for potential trouble spots and is on by 
  default. This new compiler behavior can be turned off with <SAMP><SPAN 
  class=option>-Wno-non-template-friend</SPAN></SAMP> which keeps the conformant 
  compiler code but disables the helpful warning. <BR>
  <DT><CODE>-Wold-style-cast </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wold_002dstyle_002dcast-162></A>Warn if an old-style 
  (C-style) cast to a non-void type is used within a C++ program. The new-style 
  casts (`<SAMP><SPAN class=samp>dynamic_cast</SPAN></SAMP>', `<SAMP><SPAN 
  class=samp>static_cast</SPAN></SAMP>', `<SAMP><SPAN 
  class=samp>reinterpret_cast</SPAN></SAMP>', and `<SAMP><SPAN 
  class=samp>const_cast</SPAN></SAMP>') are less vulnerable to unintended 
  effects and much easier to search for. <BR>
  <DT><CODE>-Woverloaded-virtual </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Woverloaded_002dvirtual-163></A><A 
  name=index-overloaded-virtual-fn_002c-warning-164></A><A 
  name=index-warning-for-overloaded-virtual-fn-165></A>Warn when a function 
  declaration hides virtual functions from a base class. For example, in: <PRE class=smallexample>          struct A {
            virtual void f();
          };
          
          struct B: public A {
            void f(int);
          };
     </PRE>
  <P>the <CODE>A</CODE> class version of <CODE>f</CODE> is hidden in 
  <CODE>B</CODE>, and code like: <PRE class=smallexample>          B* b;
          b-&gt;f();
     </PRE>
  <P>will fail to compile. <BR></P>
  <DT><CODE>-Wno-pmf-conversions </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wno_002dpmf_002dconversions-166></A>Disable the diagnostic 
  for converting a bound pointer to member function to a plain pointer. <BR>
  <DT><CODE>-Wsign-promo </CODE><SPAN class=roman>(C++ only)</SPAN>
  <DD><A name=index-Wsign_002dpromo-167></A>Warn when overload resolution 
  chooses a promotion from unsigned or enumerated type to a signed type, over a 
  conversion to an unsigned type of the same size. Previous versions of G++ 
  would try to preserve unsignedness, but the standard mandates the current 
  behavior. <PRE class=smallexample>          struct A {
            operator int ();
            A&amp; operator = (int);
          };
          
          main ()
          {
            A a,b;
            a = b;
          }
     </PRE>
  <P>In this example, G++ will synthesize a default `<SAMP><SPAN 
  class=samp>A&amp; operator = (const A&amp;);</SPAN></SAMP>', while cfront will 
  use the user-defined `<SAMP><SPAN class=samp>operator =</SPAN></SAMP>'. 
  </P></DD></DL></BODY></HTML>
