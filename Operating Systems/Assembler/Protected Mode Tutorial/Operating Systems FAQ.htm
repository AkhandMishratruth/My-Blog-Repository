<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0047)http://www.mega-tokyo.com/os/os-faq-kernel.html -->
<HTML><HEAD><TITLE>Operating Systems FAQ :: Kernels</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252"><LINK 
href="Operating Systems FAQ  Kernels-Dateien/default.css" type=text/css 
rel=stylesheet>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H2><A name=load_kernel>How do I make a kernel file I can 
  load?</A></H2></TD></TR>
  <TR>
    <TD>As with all things, you can do it several ways. You can tell GCC to 
      output a flat binary file with no relocations, headers or any other 
      information. I assume this is what you want. 
      <P>example;</P><PRE>GCC -c my_kernel.c
LD my_kernel.o -o kernel.bin -oformat binary -Ttext 0x100000
</PRE>
      <P>The "<B>-c</B>" GCC switch tells GCC to only compile to an object file 
      and not run the link process.</P>
      <P>Running LD with "<B>-oformat binary</B>" tells the linker you want your 
      output file to be plain, no relocations, no header information, just a 
      straight flat binary image.</P>
      <P>"<B>-Ttext 0x100000</B>" tells linker you want your "text" (code 
      segment) address to be at 1mb memory mark.</P>
      <P>You have to of course, load your binary file image into the correct 
      offset for it to run properly since all its relocations have been 
      statically linked already.</P></TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<TABLE width="100%" border=0>
  <TBODY>
  <TR>
    <TD>
      <H2><A name=32bit_files>Help! when I load my kernel my machine 
      resets!</A></H2></TD></TR>
  <TR>
    <TD>Yes. DJGPP outputs 32bit protected mode code. When your PC boots up it 
      is in what is known as Real Mode, you have to switch your machine into 
      Protected Mode, THEN jump to your kernel image. 
      <P>How you do this is up to you. You can alter your bootsector code to 
      load your file, switch to protected mode and jump to your kernel image (if 
      you have enough room for the code in your bootsector!) or you can write a 
      stub program and stick that on to the front of your kernel image (assuming 
      it gets loaded below 1mb memory mark) OR you can write a stub program, 
      load it in under 1mb memory mark and have that program load in your kernel 
      image.</P></TD></TR></TBODY></TABLE></BODY></HTML>
