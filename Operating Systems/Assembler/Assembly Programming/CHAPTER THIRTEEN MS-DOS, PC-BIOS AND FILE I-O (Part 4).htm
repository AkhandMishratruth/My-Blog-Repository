<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0084)http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html -->
<HTML><HEAD><TITLE>CHAPTER THIRTEEN: MS-DOS, PC-BIOS AND FILE I/O (Part 4)</TITLE><!-- Generated by Harlequin WebMaker 2.2.6 (30-Apr-1996)Macintosh Common Lisp Version 3.0kp2p2 [AppGen 3.0b1kp2p2] -->
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META http-equiv=pragma content=no-cache>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#000000 link=#008000 bgColor=#ffffff topMargin=10 
stylesrc="../toc.html">
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="100%" colSpan=3>
      <P align=right><A name=top></A><FONT face=Arial size=1>The Art 
      of<BR></FONT><FONT face="Arial Black" size=1>ASSEMBLY LANGUAGE 
      PROGRAMMING</FONT></P></TD></TR>
  <TR>
    <TD vAlign=center noWrap align=middle width="100%" bgColor=#000000 colSpan=3 
    height=1><A name=HEADING4></A></TD></TR>
  <TR>
    <TD vAlign=center noWrap align=middle width="34%" bgColor=#ffffff>
      <P align=left><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 4)-Dateien/WB00823_.gif" 
      width=12 align=absMiddle border=0></A><FONT face=Arial size=2><STRONG> <A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html">Chapter 
      Thirteen</A> (Part 3)</STRONG></FONT></P></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/toc.html"><FONT 
      face=Arial size=2><STRONG>Table of Content</STRONG></FONT></A></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff>
      <P align=right><FONT face=Arial size=2><STRONG><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-5.html">Chapter 
      Thirteen</A> (Part 5)&nbsp; </STRONG></FONT><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-5.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 4)-Dateien/WB00827_.gif" 
      width=12 align=absMiddle 
border=0></A></P></TD></TR></TBODY></TABLE></CENTER></DIV>
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width="100%" bgColor=#ffffff colSpan=2 height=10><A 
      name=HEADING4-1></A></TD></TR>
  <TR>
    <TD width="100%" bgColor=#f0f0f0 colSpan=2><FONT face=Arial 
      size=4><STRONG>CHAPTER THIRTEEN:<BR>MS-DOS, PC-BIOS AND FILE I/O (Part 
      4)</STRONG></FONT></TD></TR>
  <TR>
    <TD noWrap width="100%" colSpan=2 height=10></TD></TR>
  <TR>
    <TD vAlign=top width="50%"><FONT face=Arial size=2><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#HEADING4-1"><B>13.3 
      </B>- An Introduction to MS-DOS'</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#HEADING4-7"><B>13.3.1 
      </B>- MS-DOS Calling Sequence</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#HEADING4-9"><B>13.3.2 
      </B>- MS-DOS Character Oriented Functions</A> </FONT></TD>
    <TD vAlign=top width="50%"><FONT face=Arial size=2><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#HEADING4-15"><B>13.3.3 
      </B>- MS-DOS Drive Commands</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#HEADING4-17"><B>13.3.4 
      </B>- MS-DOS "Obsolete" Filing Calls</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#HEADING4-19"><B>13.3.5 
      </B>- MS-DOS Date and Time Functions</A></FONT></TD></TR>
  <TR>
    <TD noWrap width="100%" colSpan=2 height=20></TD></TR>
  <TR>
    <TD width="100%" colSpan=2><STRONG><FONT face=Arial size=3>13.3 An 
      Introduction to MS-DOS'</FONT></STRONG></TD></TR>
  <TR>
    <TD noWrap width="100%" bgColor=#000000 colSpan=2 
height=1></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face=Arial size=2>MS-DOS provides all of the basic file manager and 
device manager functions required by most application programs running on an IBM 
PC. MS-DOS handles file I/O, character I/0, memory management, and other 
miscellaneous functions in a (relatively) consistent manner. If you're serious 
about writing software for the PC, you'll have to get real friendly with MS-DOS. 
</FONT></P>
<P><FONT face=Arial size=2>The title of this section is "An Introduction to 
MS-DOS". And that's exactly what it means. There is no way MS-DOS can be 
completely covered in a single chapter. Given all of the different books that 
already exist on the subject, it probably cannot even be covered by a single 
book (it certainly hasn't been yet. Microsoft wrote a 1,600 page book on the 
subject and it didn't even cover the subject fully). All this is leading up to a 
cop-out. There is no way this subject can be treated in more than a superficial 
manner in a single chapter. If you're serious about writing programs in assembly 
language for the PC, you'll need to complement this text with several others. 
Additional books on MS-DOS include: MS-DOS Programmer's Reference (also called 
the MS-DOS Technical Reference Manual), Peter Norton's Programmer's Guide to the 
IBM PC, The MS-DOS Encyclopedia, and the MS-DOS Developer's Guide. This, of 
course, is only a partial list of the books that are available. See the 
bibliography in the appendices for more details. Without a doubt, the MS-DOS 
Technical Reference Manual is the most important text to get your hands on. This 
is the official description of MS-DOS calls and parameters. </FONT></P>
<P><FONT face=Arial size=2>MS-DOS has a long and colorful history<A 
href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#FOOTNOTE-2">[2]</A>. 
Throughout its lifetime, it has undergone several revisions, each purporting to 
be better than the last. MS-DOS' origins go all the way back to the CP/M-80 
operating system written for the Intel 8080 microprocessor chip. In fact, MS-DOS 
v1.0 was nothing much more than a clone of CP/M-80 for Intel's 8088 
microprocessor. Unfortunately, CP/M-80's file handling capabilities were 
horrible, to say the least. Therefore, DOS<A 
href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#FOOTNOTE-3">[3]</A> 
improved on CP/M. New file handling capabilities, compatible with Xenix and 
Unix, were added to DOS, producing MS-DOS v2.0. Additional calls were added to 
later versions of MS-DOS. Even with the introduction of OS/2 and Windows NT 
(which, as this is being written, have yet to take the world by storm), 
Microsoft is still working on enhancements to MS-DOS which may produce even 
later versions. </FONT></P>
<P><FONT face=Arial size=2>Each new feature added to DOS introduced new DOS 
functions while preserving all of the functionality of the previous versions of 
DOS. When Microsoft rewrote the DOS file handling routines in version two, they 
didn't replace the old calls, they simply added new ones. While this preserved 
software compatibility of programs that ran under the old version of DOS, what 
it produced was a DOS with two sets of functionally identical, but otherwise 
incompatible, file services. </FONT></P>
<P><FONT face=Arial size=2>We're only going to concentrate on a small subset of 
the available DOS commands in this chapter. We're going to totally ignore those 
obsolete commands that have been augmented by newer, better, commands in later 
versions of DOS. Furthermore, we're going to skip over a description of those 
calls that have very little use in day to day programming. For a complete, 
detailed, look at the commands not covered in this chapter, you should consider 
the acquisition of one of the aforementioned books.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING4-7></A>13.3.1 MS-DOS Calling 
Sequence</FONT></STRONG></P>
<P><FONT face=Arial size=2>MS-DOS is called via the <CODE>int 21h 
</CODE>instruction. To select an appropriate DOS function, you load the <CODE>ah 
</CODE>register with a function number before issuing the <CODE>int 21h 
</CODE>instruction. Most DOS calls require other parameters as well. Generally, 
these other parameters are passed in the CPU's register set. The specific 
parameters will be discussed along with each call. Unless MS-DOS returns some 
specific value in a register, all of the CPU's registers are preserved across a 
call to DOS<A 
href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-4.html#FOOTNOTE-4">[4]</A>.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING4-9></A>13.3.2 MS-DOS 
Character Oriented Functions</FONT></STRONG></P>
<P><FONT face=Arial size=2>DOS provides 12 character oriented I/O calls. Most of 
these deal with writing and reading data to/from the keyboard, video display, 
serial port, and printer port. All of these functions have corresponding BIOS 
services. In fact, DOS usually calls the appropriate BIOS function to handle the 
I/O operation. However, due to DOS' redirected I/O and device driver facilities, 
these functions don't always call the BIOS routines. Therefore, you shouldn't 
call the BIOS routines (rather than DOS) simply because DOS ends up calling 
BIOS. Doing so may prevent your program from working with certain DOS-supported 
devices. </FONT></P>
<P><FONT face=Arial size=2>Except for function code seven, all of the following 
character oriented calls check the console input device (keyboard) for a 
control-C. If the user presses a control-C, DOS executes an <CODE>int 23h 
</CODE>instruction. Usually, this instruction will cause the program to abort 
and control will be returned to DOS. Keep this in mind when issuing these 
calls.</FONT></P>
<P><FONT face=Arial size=2>Microsoft considers these calls obsolete and does not 
guarantee they will be present in future versions of DOS. So take these first 12 
routines with a rather large grain of salt. Note that the UCR Standard Library 
provides the functionality of many of these calls anyway, and they make the 
proper DOS calls, not the obsolete ones.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE borderColor=#c0c0c0 cellSpacing=0 cellPadding=0 width="100%" border=1>
  <CAPTION><FONT face=Arial size=2><STRONG>DOS Character Oriented 
  Functions</STRONG></FONT></CAPTION>
  <TBODY>
  <TR>
    <TH align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial size=2>Function 
      # (AH)</FONT></STRONG></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial size=2>Input 
      Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial size=2>Output 
      Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
    size=2>Description</FONT></TH></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>1</FONT></STRONG></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- char read</FONT></TD>
    <TD><FONT face=Arial size=2>Console Input w/Echo: Reads a single character 
      from the keyboard and displays typed character on screen.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>2</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- output char</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2>Console Output: Writes a single character to 
      the display.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>3</FONT></STRONG></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- char read</FONT></TD>
    <TD><FONT face=Arial size=2>Auxiliary Input: Reads a single character from 
      the serial port.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>4</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- output char</FONT></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2>Auxiliary Output: Writes a single character to 
      the output port</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>5</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- output char</FONT></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2>Printer Output: Writes a single character to 
      the printer</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>6</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- output char (if not 
      0FFh)</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- char read (if input 
      <CODE>dl</CODE> = 0FFh)</FONT></TD>
    <TD><FONT face=Arial size=2>Direct Console I/O: On input, if 
      <CODE>dl</CODE> contains 0FFh, this function attempts to read a character 
      from the keyboard. If a character is available, it returns the zero flag 
      clear and the character in <CODE>al</CODE>. If no character is available, 
      it returns the zero flag set. On input, if <CODE>dl</CODE> contains a 
      value other than 0FFh, this routine sends the character to the display. 
      This routine does not do ctrl-C checking.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>7</FONT></STRONG></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- char read</FONT></TD>
    <TD><FONT face=Arial size=2>Direct Console Input: Reads a character from 
      the keyboard. Does not echo the character to the display. This call does 
      not check for ctrl-C</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>8</FONT></STRONG></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- char read</FONT></TD>
    <TD><FONT face=Arial size=2>Read Keyboard w/o Echo: Just like function 7 
      above, except this call checks for ctrl-C.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>9</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>ds:dx</CODE>- pointer to string 
      terminated with "$".</FONT></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2>Display String: This function displays the 
      characters from location <CODE>ds:dx</CODE> up to (but not including) a 
      terminating "$" character.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>0Ah</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>ds:dx</CODE>- pointer to input 
      buffer.</FONT></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2>Buffered Keyboard Input: This function reads a 
      line of text from the keyboard and stores it into the input buffer pointed 
      at by <CODE>ds:dx</CODE>. The first byte of the buffer must contain a 
      count between one and 255 that contains the maximum number of allowable 
      characters in the input buffer. This routine stores the actual number of 
      characters read in the second byte. The actual input characters begin at 
      the third byte of the buffer.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>0Bh</FONT></STRONG></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- status (0=not ready, 
      0FFh=ready)</FONT></TD>
    <TD><FONT face=Arial size=2>Check Keyboard Status: Determines whether a 
      character is available from the keyboard.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>0Ch</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- DOS opcode 0, 1, 6, 7, or 
      8</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- input character if opcode 1, 
      6, 7, or 8.</FONT></TD>
    <TD><FONT face=Arial size=2>Flush Buffer: This call empties the system 
      type ahead buffer and then executes the DOS command specified in the al 
      register (if <CODE>al</CODE>=0, no further 
action).</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face=Arial size=2>Functions 1, 2, 3, 4, 5, 9, and 0Ah are obsolete and 
you should not use them. Use the DOS file I/O calls instead (opcodes 3Fh and 
40h).</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING4-15></A>13.3.3 MS-DOS Drive 
Commands</FONT></STRONG></P>
<P><FONT face=Arial size=2>MS-DOS provides several commands that let you set the 
default drive, determine which drive is the default, and perform some other 
operations. The following table lists those functions. </FONT></P>
<DIV align=center>
<CENTER>
<TABLE borderColor=#c0c0c0 cellSpacing=0 cellPadding=0 width="100%" border=1>
  <CAPTION><FONT face=Arial size=2><STRONG>DOS Disk Drive 
  Functions</STRONG></FONT></CAPTION>
  <TBODY>
  <TR>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial size=2>Function 
      #(AH)</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Input<BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Output<BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
    size=2>Description</FONT></TH></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>0Dh</FONT></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD align=middle><FONT face=Arial size=2>-</FONT></TD>
    <TD><FONT face=Arial size=2>Reset Drive: Flushes all file buffers to disk. 
      Generally called by ctrl-C handlers or sections of code that need to 
      guaranteed file consistency because an error may occur.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>0Eh</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive number</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- number of logical 
      drives</FONT></TD>
    <TD><FONT face=Arial size=2>Set Default Drive: sets the DOS default drive 
      to the specified value (0=A, 1=B, 2=C, etc.). Returns the number of 
      logical drives in the system, although they may not be contiguous from 
      0-<CODE>al</CODE>.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>19H</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- default drive 
number</FONT></TD>
    <TD><FONT face=Arial size=2>Get Default Drive: Returns the current system 
      default drive number (0=A, 1=B, 2=C, etc.).</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>1Ah</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ds:dx</CODE>- Disk Transfer Area 
      address.</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2>Set Disk Transfer Area Address: Sets the 
      address that MS-DOS uses for obsolete file I/O and Find First/Find Next 
      commands.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>1Bh-</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- 
      sectors/cluster<BR><BR><CODE>cx</CODE>- 
      bytes/sector<BR><BR><CODE>dx</CODE>- # of 
      clusters<BR><BR><CODE>ds:bx</CODE> - points at media descriptor 
    byte</FONT></TD>
    <TD><FONT face=Arial size=2>Get Default Drive Data: Returns information 
      about the disk in the default drive. Also see function 36h. Typical values 
      for the media descriptor byte include:<BR><BR>0F0h- 3.5"<BR><BR>0F8h- Hard 
      disk<BR><BR>0F9h- 720K 3.5" or 1.2M 5.25"<BR><BR>0FAh- 320K 
      5.25"<BR><BR>0FBh- 640K 3.5"<BR><BR>0FCh- 180K 5.25"<BR><BR>0FDh- 360K 
      5.25:<BR><BR>0FEh- 160K 5.25"<BR><BR>0FFh- 320K 5.25"</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>1Ch</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive number</FONT></TD>
    <TD><FONT face=Arial size=2>See above</FONT></TD>
    <TD><FONT face=Arial size=2>Get Drive Data: same as above except you can 
      specify the drive number in the dl register (0=default, 1=A, 2=B, 3=C, 
      etc.).</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>1Fh</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- contains 0FFh if error, 0 if 
      no error.<BR><BR><CODE>ds:bx</CODE>- ptr to DPB</FONT></TD>
    <TD><FONT face=Arial size=2>Get Default Disk Parameter Block (DPB): If 
      successful, this function returns a pointer to the following 
      structure:<BR><BR>Drive (byte) - Drive number (0-A, 1=B, 
      etc.).<BR><BR>Unit (byte) - Unit number for driver.<BR><BR>SectorSize 
      (word) - # bytes/sector.<BR><BR>ClusterMask (byte) - sectors/cluster minus 
      one.<BR><BR>Cluster2 (byte) - 2clusters/sector<BR><BR>FirstFAT (word) - 
      Address of sector where FAT starts.<BR><BR>FATCount (byte) - # of 
      FATs.<BR><BR>RootEntries (word) - # of entries in root 
      directory.<BR><BR>FirstSector (word) - first sector of first 
      cluster.<BR><BR>MaxCluster (word) - # of clusters on drive, plus 
      one.<BR><BR>FATsize (word) - # of sectors for FAT.<BR><BR>DirSector (word) 
      - first sector containing directory.<BR><BR>DriverAdrs (dword) - address 
      of device driver.<BR><BR>Media (byte) - media descriptor 
      byte.<BR><BR>FirstAccess (byte) - set if there has been an access to 
      drive.<BR><BR>NextDPB (dword) - link to next DPB in list.<BR><BR>NextFree 
      (word) - last allocated cluster.<BR><BR>FreeCnt (word) - number of free 
      clusters.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>2Eh</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- verify flag (0=no verify, 
      1=verify on).</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2>Set/Reset Verify Flag: Turns on and off write 
      verification. Usually off since this is a slow operation, but you can turn 
      it on when performing critical I/O.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>2Fh</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>es:bx</CODE>- pointer to DTA</FONT></TD>
    <TD><FONT face=Arial size=2>Get Disk Transfer Area Address: Returns a 
      pointer to the current DTA in <CODE>es:bx</CODE>..</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>32h</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive number.</FONT></TD>
    <TD><FONT face=Arial size=2>Same as 1Fh</FONT></TD>
    <TD><FONT face=Arial size=2>Get DPB: Same as function 1Fh except you get 
      to specify the driver number (0=default, 1=A, 2=B, 3=C, 
etc.).</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>33h</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- 05 (subfunction 
    code)</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- startup drive #.</FONT></TD>
    <TD><FONT face=Arial size=2>Get Startup Drive: Returns the number of the 
      drive used to boot DOS (1=A, 2=B, 3=C, etc.).</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>36h</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive number.</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ax</CODE>- 
      sectors/cluster<BR><BR><CODE>bx</CODE>- available 
      clusters<BR><BR><CODE>cx</CODE>- bytes/sector<BR><BR><CODE>dx</CODE>- 
      total clusters</FONT></TD>
    <TD><FONT face=Arial size=2>Get Disk Free Space: Reports the amount of 
      free space. This call supersedes calls 1Bh and 1Ch that only support 
      drives up to 32Mbytes. This call handles larger drives. You can compute 
      the amount of free space (in bytes) by bx*ax*cx. If an error occurs, this 
      call returns 0FFFFh in <CODE>ax</CODE>.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><FONT face=Arial size=2>54h</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- verify state.</FONT></TD>
    <TD><FONT face=Arial size=2>Get Verify State: Returns the current state of 
      the write verify flag (<CODE>al</CODE>=0 if off, <CODE>al</CODE>=1 if 
      on).</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><STRONG><FONT face=Arial size=3><A name=HEADING4-17></A>13.3.4 MS-DOS 
"Obsolete" Filing Calls</FONT></STRONG></P>
<P><FONT face=Arial size=2>DOS functions 0Fh - 18h, 1Eh, 20h-24h, and 26h - 29h 
are the functions left over from the days of CP/M-80. In general, you shouldn't 
bother at all with these calls since MS-DOS v2.0 and later provides a much 
better way to accomplish the operations performed by these calls.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING4-19></A>13.3.5 MS-DOS Date 
and Time Functions</FONT></STRONG></P>
<P><FONT face=Arial size=2>The MS-DOS date and time functions return the current 
date and time based on internal values maintained by the real time clock (RTC). 
Functions provided by DOS include reading and setting the date and time. These 
date and time values are used to perform date and time stamping of files when 
files are created on the disk. Therefore, if you change the date or time, keep 
in mind that it will have an effect on the files you create thereafter. Note 
that the UCR Standard Library also provides a set of date and time functions 
which, in many cases, are somewhat easier to use than these DOS calls. 
</FONT></P>
<DIV align=center>
<CENTER>
<TABLE borderColor=#c0c0c0 cellSpacing=0 cellPadding=0 width="100%" border=1>
  <CAPTION><FONT face=Arial size=2><STRONG>Date and Time 
  Functions</STRONG></FONT></CAPTION>
  <TBODY>
  <TR>
    <TH align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial size=2>Function 
      #<BR><BR>(AH)</FONT></STRONG></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Input<BR><BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Output<BR><BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
    size=2>Description</FONT></TH></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>2Ah</FONT></STRONG></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- day (0=Sun, 1=Mon, 
      etc.).<BR><BR><CODE>cx</CODE>- year<BR><BR><CODE>dh</CODE>- month (1=Jan, 
      2=Feb, etc.).<BR><BR><CODE>dl</CODE>- Day of month (1-31).</FONT></TD>
    <TD><FONT face=Arial size=2>Get Date: returns the current MS-DOS 
      date.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>2Bh</FONT></STRONG></TD>
    <TD><FONT face=Arial size=2><CODE>cx</CODE>- year (1980 - 
      2099)<BR><BR><CODE>dh</CODE>- month (1-12)<BR><BR><CODE>dl</CODE>- day 
      (1-31)</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2>Set Date: sets the current MS-DOS 
    date.</FONT></TD></TR>
  <TR>
    <TD align=middle bgColor=#f0f0f0><STRONG><FONT face=Arial 
      size=2>2CH</FONT></STRONG></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2><CODE>ch</CODE>- hour (24hr 
      fmt)<BR><BR><CODE>cl</CODE>- minutes<BR><BR><CODE>dh</CODE>- 
      seconds<BR><BR><CODE>dl</CODE>- hundredths</FONT></TD>
    <TD><FONT face=Arial size=2>Get Time: reads the current MS-DOS time. Note 
      that the hundredths of a second field has a resolution of 1/18 
      second.</FONT></TD></TR>
  <TR>
    <TD bgColor=#f0f0f0>
      <P align=center><STRONG><FONT face=Arial size=2>2Dh</FONT></STRONG></P></TD>
    <TD><FONT face=Arial size=2><CODE>ch</CODE>- hour<BR><BR><CODE>cl</CODE>- 
      minutes<BR><BR><CODE>dh</CODE>- seconds<BR><BR><CODE>dl</CODE>- 
      hundredths</FONT></TD>
    <TD>
      <P align=center><FONT face=Arial size=2>-</FONT></P></TD>
    <TD><FONT face=Arial size=2>Set Time: sets the current MS-DOS 
    time.</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<HR color=#000000 noShade SIZE=1>

<P><FONT face=Arial size=2><STRONG><A name=FOOTNOTE-2></A>[2] </STRONG>The 
MS-DOS Encyclopedia gives Microsoft's account of the history of MS-DOS. Of 
course, this is a one-sided presentation, but it's interesting nonetheless. 
<BR><STRONG><A name=FOOTNOTE-3></A>[3] </STRONG>This text uses "DOS" to mean 
MS-DOS. <BR><STRONG><A name=FOOTNOTE-4></A>[4]</STRONG> So Microsoft claims. 
This may or may not be true across all versions of DOS.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center noWrap align=middle width="100%" bgColor=#000000 colSpan=3 
    height=1></TD></TR>
  <TR>
    <TD vAlign=center noWrap align=middle width="34%" bgColor=#ffffff>
      <P align=left><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 4)-Dateien/WB00823_.gif" 
      width=12 align=absMiddle border=0></A><FONT face=Arial size=2><STRONG> <A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html">Chapter 
      Thirteen</A> (Part 3)</STRONG></FONT></P></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/toc.html"><FONT 
      face=Arial size=2><STRONG>Table of Content</STRONG></FONT></A></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff>
      <P align=right><FONT face=Arial size=2><STRONG><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-5.html">Chapter 
      Thirteen</A> (Part 5)&nbsp; </STRONG></FONT><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-5.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 4)-Dateien/WB00827_.gif" 
      width=12 align=absMiddle 
border=0></A></P></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=right><FONT face=Arial size=2><STRONG>Chapter Thirteen: MS-DOS, PC-BIOS 
and File I/O (Part 4)<BR>28 SEP 1996</STRONG></FONT></P></BODY></HTML>
