<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List
href="./Compiling%20Binary%20Files%20Using%20A%20C%20Compiler-Dateien/filelist.xml">
<title>Making plain binary files using a C compiler (i386+)</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Daniel Himmelein</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Daniel Himmelein</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:Created>2002-05-15T16:23:00Z</o:Created>
  <o:LastSaved>2002-05-15T16:32:00Z</o:LastSaved>
  <o:Pages>16</o:Pages>
  <o:Words>5243</o:Words>
  <o:Characters>29888</o:Characters>
  <o:Lines>249</o:Lines>
  <o:Paragraphs>59</o:Paragraphs>
  <o:CharactersWithSpaces>36704</o:CharactersWithSpaces>
  <o:Version>9.2812</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:DoNotHyphenateCaps/>
  <w:PunctuationKerning/>
  <w:DrawingGridHorizontalSpacing>6 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>6 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>3</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:DoNotShadeFormData/>
  <w:Compatibility>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Courier;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-alt:"Courier New";
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
 /* Page Definitions */
@page
	{mso-page-border-surround-header:no;
	mso-page-border-surround-footer:no;}
@page Section1
	{size:612.0pt 792.0pt;
	margin:70.85pt 70.85pt 2.0cm 70.85pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:36.0pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=DE style='tab-interval:36.0pt;text-justify-trim:punctuation'>

<div class=Section1>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:18.5pt;font-family:Arial;
color:black;mso-ansi-language:EN-GB'>Making plain binary files using a C
compiler (i386+)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>Cornelis Frank<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>April 10, 2000<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>I wrote this article because there isn’t much information on the
Internet concerning this topic<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>and I needed this for the EduOS project.<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>No liability is assumed for incidental or consequential damages in
connection with or arising<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>out of use of the information or programs contained herein.<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>So if you blow up your computer because of my bad “English” that’s your
problem not mine.<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>1 Which tools do you need?<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>An i386 PC or higher.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>A Linux distribution like Red Hat
or Slackware.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=FR style='font-size:1.0pt;font-family:Arial;
color:black;mso-ansi-language:FR'>_ </span></b><span lang=FR style='color:black;
mso-ansi-language:FR'>GNU GCC compiler. </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>This C compiler usually comes with
Linux. To check if you’re having<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>GCC type the following at the prompt:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc --version<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This should give an output like:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>2.7.2.3<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The number probably will not match the above one, but that doesn’t
really matter.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>binutils </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>for Linux.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>NASM Version 0.97 or higher. The
Netwide Assembler, NASM, is an 80x86 assembler<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>designed for portability and modularity. It supports a range of object
file formats, including<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Linux ‘a.out’ and ELF, NetBSD/FreeBSD, COFF, Microsoft 16-bit OBJ and
Win32. It will<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>also output plain binary files. Its syntax is designed to be simple and
easy to understand,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>similar to Intel’s but less complex. It supports Pentium, P6 and MMX
opcodes, and has<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>macro capability.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Normally you don’t have NASM on your system. Download it from:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>http://sunsite.unc.edu/pub/Linux/devel/lang/assemblers/<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>A text editor like </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>pico </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>or </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>emacs</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span style='mso-bidi-font-size:11.0pt;color:black'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>1.1 Installing The Netwide Assembler<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Assuming that </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>nasm-0.97.tar.gz
</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>is in the
current directory type:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gunzip nasm-0.97.tar.gz<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>tar -vxf nasm-0.97.tar<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will create a directory called </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>nasm-0.97</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. Go to that directory. Next we will compile this<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>assembler by typing:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>./configure<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>make<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will create the executables </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>nasm </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>and
</span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-GB'>ndisasm</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. You can copy these files to you </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>/usr/bin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>directory to make them easily accessible. Now you can remove the </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>nasm-0.97 </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>directory from<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>your system. I personally compiled the NASM successfully under Red Hat
5.1 and Slackware 3.1,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>so this shouldn’t give big troubles.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>2 Making a first binary file using C<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Create a file called </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>test.c </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>using your text editor. Put
herein:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Compile this by typing:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -o test -Ttext 0x0 -e main test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objcopy -R .note -R .comment -S -O
binary test test.bin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This creates our binary file called </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>test.bin</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. We can view this binary file using </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>ndisasm</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. Do this<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>by typing:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ndisasm -b 32 test.bin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will give the following output:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000004 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We get three columns. The first one contains the memory addresses of the
instructions. The second<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>column contains the byte code of the instructions and the last column
contains the instruction itself.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>2.1 Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The code we get just seems to set up a basic framework for a function. The
register </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ebp </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>is being<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>saved for later use concerning function parameter handling. As you can
notice the code is 32 bit.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>GNU GCC only can create 32 bit code. So if you would like to run this
code you first need to set<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>up a 32 bit environment like Linux does. Here fore you need to go to
protected mode.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>You can also create directly a binary file using </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>ld</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. Here fore compile </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>test.c </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>like this:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld test.o -o test.bin -Ttext 0x0 -e
main -oformat binary<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will produce exactly the same binary code as the previous method.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>3 Program using a local variable<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Next we will take a look on how GCC handles the reservation of a local
variable. Here fore we<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>will create a new </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>test.c </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>which contains:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i; /* declaration of an int */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>i = 0x12345678; /* hexadecimal */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Compile this by typing:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -o test -Ttext 0x0 -e main test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objcopy -R .note -R .comment -S -O
binary test test.bin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>After we compiled we get the next binary file:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC04 sub esp,byte +0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745FC78563412 mov dword
[ebp-0x4],0x12345678<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>3.1 Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The first two and last two instructions are the same as in the previous
example. There are only<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>two new instructions added between the old ones. The first one decreases
</span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-GB'>esp </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>with 4. This is the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>way GCC reserves an </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>int</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>, which is four bytes in
size, on the stack. The following instruction<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>immediately demonstrates us the usage of the </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>ebp </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>register.
This register remains unchanged in<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the function and is only used to refer to the local variables on the
stack. The place on the stack<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>were these local variables are stored is usually called the local stack
frame. In this context the </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>register is called the frame pointer.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The next instruction fills the on the stack reserved </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>int </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>up with the value </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x12345678</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. Also notice<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the reversed order in which the processor stores data. In the second
column, line four, we see<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>...78563412</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. This phenomena is called <i>backwards
storage</i></span><span lang=EN-GB style='font-size:9.0pt;color:black;
mso-ansi-language:EN-GB'>1</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Note that you also can create directly a binary file using </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>as shown before. So compile with:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -o test.bin -Ttext 0x0 -e main
-oformat binary test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This gives us the same binary file as before.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>3.2 Direct assignment<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When we change:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>int i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>i = 0x12345678;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>into,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i = 0x12345678;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>we get exactly the same binary file. This is very important to notice as
it is <i>not </i>so when we use<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>global variables.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>4 Program using a global variable<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Next we will take a look on how GCC handles global variables. This will
be done using the next<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>test.c </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>program.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i; /* declaration of global
variable */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>i = 0x12345678;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Compile this by typing:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -o test -Ttext 0x0 -e main test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objcopy -R .note -R .comment -S -O
binary test test.bin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This leads us to the following binary code:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 C705101000007856 mov dword
[0x1010],0x12345678<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>-3412<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>4.1 Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The instruction in the middle of the code will write our value we
assigned to somewhere in the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>memory, in our case to address </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>0x1010</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. This is because by
default the linker </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>ld </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>page-aligns the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>data segment. We can turn this off by using the parameter </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>-N </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>with the linker </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>ld</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. This
gives us as<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>binary file:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 C705100000007856 mov dword
[0x10],0x12345678<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>-3412<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>As we can see now, the data is stored right after the code. We can also
specify the data segment<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>ourself. Compile here fore the program </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>test.c </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>with:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -o test -Ttext 0x0 -Tdata 0x1234
-e main -N test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objcopy -R .note -R .comment -S -O
binary test test.bin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will give us as binary file:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 C705341200007856 mov dword
[0x1234],0x12345678<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>-3412<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Now the global variable is being stored at our gives address </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>0x1234</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. Thus, if we use the parameter<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>-Tdata </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>with </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>ld</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>,
we can specify the location of the data segment ourself. Otherwise the data<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>segment is located right after the code. By storing the variable
somewhere in the data memory it<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>remains accessible even outside the </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>main </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>function.
This is why they call </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>int i </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>a <i>global variable</i>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We can also create directly the binary file using </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>with the parameter </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>-oformat binary</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>4.2 Direct assignment<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Some of my experiments point out that direct assigned global variables
can be handled as normal<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>global variables or can be stored as data directly after the code in the
binary file. </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>handles the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>global variables as data when there are already data constants used.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Take a look at the following program:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>const int c = 0x12345678;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Compile this with:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -o test.bin -Ttext 0x0 -e main -N
-oformat binary test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This gives as binary file:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000004 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000005 0000 add [eax],al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000007 007856 add [eax+0x56],bh<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000A 3412 xor al,0x12<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We can see that there are some extra bytes at the end of our binary
file. This is a read-only data<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>section aligned on 4 bytes which contains our global constant.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>4.2.1 Usage of objdump<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>With </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objdump </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>we can get even more information.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objdump --disassemble-all test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This gives us the next screen dump:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>test.o: file format elf32-i386<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .text:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 &lt;main&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0: 55 pushl %ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>1: 89 e5 movl %esp,%ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>3: c9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>4: c3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .data:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .rodata:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=FR style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:FR'>00000000 &lt;c&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=FR style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:FR'>0: 78 56 js 58 &lt;main+0x58&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=FR style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:FR'>2: 34 12 xorb $0x12,%al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We can clearly see the read-only data section containing our global
constant </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>c</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. Now take a look at<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the next program:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i = 0x12345678;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>const int c = 0x12346578;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When we compile this program and do an </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>objdump </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>on this we get:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>test.o: file format elf32-i386<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .text:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 &lt;main&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0: 55 pushl %ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>1: 89 e5 movl %esp,%ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>3: c9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>4: c3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .data:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 &lt;i&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0: 78 56 js 58 &lt;main+0x58&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>2: 34 12 xorb $0x12,%al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .rodata:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=FR style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:FR'>00000000 &lt;c&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=FR style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:FR'>0: 78 56 js 58 &lt;main+0x58&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=FR style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:FR'>2: 34 12 xorb $0x12,%al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We can see our </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>int i </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>in the data section and
our constant </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>c </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>in the read-only data section. So
when<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>has to use global constants it
automatically uses the data section to store global variables.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>5 Pointers<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Now let’s see how GCC handles pointers to variables. Therefore we will
use the following program.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int *p; /* a pointer to an integer */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>p = &amp;i; /* let pointer p points
to integer i */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>*p = 0x12345678; /* makes i =
0x12345678 */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This program results in the following binary code:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC08 sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000006 8D55FC lea edx,[ebp-0x4]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000009 8955F8 mov [ebp-0x8],edx<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000C 8B45F8 mov eax,[ebp-0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000F C70078563412 mov dword
[eax],0x12345678<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000015 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000016 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>5.1 Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Again the first two and last two instructions are the same as usual. Next
we’ve got:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This instruction will reserve 8 bytes on the stack for local variables. Seems
like a pointer is being<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>stored using 4 bytes. At this point the stack looks like in figure 1. As
you can see the </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>lea </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>instruction<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>ebp-0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>esp = ebp-0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>0<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>4 bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>int *p<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>4 bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>int i<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>0<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>stack<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Figure 1: The stack<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>will load the effective address of </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>int i</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
Next this value is being stored in </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>int *p</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. After this the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>value of </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>int *p </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>is being used as a pointer to a </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>dword </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>wherein the value </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x12345678 </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>is being<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>stored.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>6 Calling a function<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Now let’s take a look on how GCC handles function calls. Take a look at
the next example:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>void f (); /* function prototype */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>f (); /* function call */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>void f () { /* function definition */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will give us as binary code:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 E804000000 call 0xc<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000008 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000009 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000000A 89F6 mov esi,esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000C 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000F C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000010 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>6.1 Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In the function </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>main </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>we can see clearly a </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>call </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>to the empty function </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>f </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>at
address </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0xC</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. This empty<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>function has the same basic structure as the function </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>main</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. This means that there is no structural<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>difference between the entry function and any other function. When you
link using </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>and you add<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>-M &gt;mem.txt </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>to the </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>parameters you will get a text file wherein you find
usefull documentation<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>on how everything is linked and stored into the memory. In the file </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>mem.txt </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>you’ll find somewhere<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>two lines like these:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Address of section .text set to 0x0<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Address of section .data set to
0x1234<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This means that the binary code starts at address </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>0x0 </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>and the data area where the global variables<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>are being stored starts at address </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x1234</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
You’ll also find something like:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>.text 0x00000000 0x11<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>*(.text)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>.text 0x00000000 0x11 test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0x0000000c f<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0x00000000 main<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The first column contains the name of the section. In our case it is a </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>.text </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>section. The second<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>column contains the origin of the sections. The third column contains
the length of the sections<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>and the last column contains some extra information like the name of
functions and used object<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>files. We can see clearly now that the function </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>f </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>starts
at offset </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0xC </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>and that the function </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>main </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>is<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the entry point of the binary file. And the length </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>0x11 </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>of the program is also correct since the last<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>instruction (ret) is at address </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x10 </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>and
takes 1 byte.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>6.2 Usage of objdump<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objdump </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>can be used to display information
from object files. This information is useful to examin<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the internal structure of the object files. Use </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>objdump </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>by typing:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>objdump --disassemble-all test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will give the following output to the screen:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>test.o: file format elf32-i386<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .text:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 &lt;main&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0: 55 pushl %ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>1: 89 e5 movl %esp,%ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>3: e8 04 00 00 00 call c &lt;f&gt;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>8: c9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>9: c3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>a: 89 f6 movl %esi,%esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000c &lt;f&gt;:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>c: 55 pushl %ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>d: 89 e5 movl %esp,%ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>f: c9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>10: c3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>Disassembly of section .data:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Again this is very usefull when you want to study the binary code that
GCC creates. Notice that<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>they are not using the Intel syntax for displaying the instructions. They
use instruction representations<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>like </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>pushl </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>and </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>movl</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
The </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>l </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>at the end of the instructions
indicates that the instructions<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>perform operations on 32-bit (</span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>long</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>) operands. An other
important difference contrary to Intels<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>syntax is that the order of the operands is reversed. Next example shows
us the two different<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>notations for the instruction that moves the data from register </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>EBX </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>to register </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>EAX</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MOV EAX,EBX ; Intel syntax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>movl %ebx,%eax ; ’GNU’ syntax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>As for Intel the first operand is the destination and the second operand
is the source.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>7 Return codes<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>You probably noticed that I always use </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>int main () </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>as my function definition, but I never actually<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>return an </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>int</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. So, let us try it.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>return 0x12345678;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This program gives the following binary code:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 B878563412 mov
eax,0x12345678<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000008 EB02 jmp short 0xc<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000000A 89F6 mov esi,esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000C C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>7.1 Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>As you can see values are being returned using the register </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>eax</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. Because it is a register we do not<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>need to explicitly fill the register with a return value, so we can also
return <i>nothing </i>instead. There<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>is an other advantage to it. Because the return code is stored in a
register, we also do not need to<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>explicitly read the return code. We use this all the time when we call
the </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ANSI C </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>function </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>printf<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>to print something on the screen. We always use:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>printf (...);<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>While </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>printf </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>actually returns an </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>int </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>to the caller. Of course the compiler can’t use this
method if<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the type of the return parameter is bigger than 4 bytes. In the next
paragraph we will demonstrate<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>a situation inwhich this occures.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>7.2 Returning data structures<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Consider next program,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>typedef struct {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int a,b,c,d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i [10];<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>} MyDef;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef MyFunc (); /* function
prototype */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () { /* entry point */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>d = MyFunc ();<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef MyFunc () { /* a local function
*/<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>return d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This program let us generate next binary code.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC38 sub esp,byte +0x38<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000006 8D45C8 lea eax,[ebp-0x38]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000009 50 push eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000A E805000000 call 0x14<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000F 83C404 add esp,byte +0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000012 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000013 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000014 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000015 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000017 83EC38 sub esp,byte +0x38<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001A 57 push edi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001B 56 push esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001C 8B4508 mov eax,[ebp+0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000001F 89C7 mov edi,eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000021 8D75C8 lea esi,[ebp-0x38]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000024 FC cld<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000025 B90E000000 mov ecx,0xe<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000002A F3A5 rep movsd<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000002C EB02 jmp short 0x30<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000002E 89F6 mov esi,esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000030 89C0 mov eax,eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000032 8D65C0 lea esp,[ebp-0x40]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000035 5E pop esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000036 5F pop edi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000037 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000038 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection of test.bin<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>At address </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>0x3 </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>of the function </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>main </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>we see that the compiler reserves </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>0x38 </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>bytes on the stack.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This is the size of the structure </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>MyDef</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
At address </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0x6 </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>to </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x9 </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>we
see the solution to “the problem”.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Since </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>MyDef </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>is bigger than 4 bytes, the
compiler passes a pointer to </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>d </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>to the function </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>MyFunc </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>at<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>address </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0x14</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. This function can then use that
pointer to fill up </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>d </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>with data. Please notice
that<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>a parameter is being passed to the function </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>MyFunc </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>while this function actual doesn’t have any<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>parameters at all in its C function declaration. To fill the data
structure, </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>MyFunc </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>uses a 32 bit data<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>movement instruction:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000002A F3A5 rep movsd<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>7.3 Returning data structures II<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Of course we can now ask ourselfs the question: Which pointer will be
given to the function<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>MyFunc </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>if we don’t want to store the
returned data structure? Consider therefore next program.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>typedef struct {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int a,b,c,d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i [10];<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>} MyDef;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef MyFunc (); /* function
prototype */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () { /* entry point */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyFunc ();<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef MyFunc () { /* a local function
*/<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>MyDef d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>return d;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The produced binary code,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC38 sub esp,byte +0x38<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000006 8D45C8 lea eax,[ebp-0x38]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000009 50 push eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000A E805000000 call 0x14<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000F 83C404 add esp,byte +0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000012 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000013 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000014 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000015 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000017 83EC38 sub esp,byte +0x38<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001A 57 push edi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001B 56 push esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001C 8B4508 mov eax,[ebp+0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000001F 89C7 mov edi,eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000021 8D75C8 lea esi,[ebp-0x38]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000024 FC cld<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000025 B90E000000 mov ecx,0xe<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000002A F3A5 rep movsd<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000002C EB02 jmp short 0x30<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000002E 89F6 mov esi,esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000030 89C0 mov eax,eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000032 8D65C0 lea esp,[ebp-0x40]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000035 5E pop esi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000036 5F pop edi<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000037 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000038 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This code shows us that — although there aren’t any local variables in
the entry function </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>main </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>at<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>address </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0x0</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>—the function reserves some place
on the stack for a variable of exactly </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x38 </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>bytes
in<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>size. Then a pointer to this data structure is being passed to the
function </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>MyFunc </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>at address </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x14</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>just as in the previous example. Also notice that the function </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>MyFunc </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>hasn’t change internally.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>8 Passing function parameters<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In this section we will take a look on how function parameters are
passed to functions. Let’s take<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>a look at the example:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>char res; /* global variable */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>char f (char a, char b); /* function
prototype */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () { /* entry point */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>res = f (0x12, 0x23); /* function
call */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>char f (char a, char b) { /* function
definition */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>return a + b; /* return code */<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will generate as binary code:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 6A23 push byte +0x23<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000005 6A12 push byte +0x12<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000007 E810000000 call 0x1c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000000C 83C408 add esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000000F 88C0 mov al,al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000011 880534120000 mov [0x1234],al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000017 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000018 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000019 8D7600 lea esi,[esi+0x0]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001C 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001D 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000001F 83EC04 sub esp,byte +0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000022 53 push ebx<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000023 8B5508 mov edx,[ebp+0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000026 8B4D0C mov ecx,[ebp+0xc]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000029 8855FF mov [ebp-0x1],dl<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000002C 884DFE mov [ebp-0x2],cl<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000002F 8A45FF mov al,[ebp-0x1]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000032 0245FE add al,[ebp-0x2]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000035 0FBED8 movsx ebx,al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000038 89D8 mov eax,ebx<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000003A EB00 jmp short 0x3c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000003C 8B5DF8 mov ebx,[ebp-0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000003F C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000040 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>8.1 C calling convention<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The first thing we notice is that the parameters are pushed onto the
stack in reversed order. This<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>is the C calling convention. The C calling convention in 32-bit programs
is as follows. In the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>following description, the words <i>caller </i>and <i>callee </i>are
used to denote the function doing the calling<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>and the function which gets called.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The <i>caller </i>pushes the
function’s parameters on the stack, one after another, in reverse order<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>(right to left, so that the first argument specified to the function is
pushed last).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The <i>caller </i>then executes a
near </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>CALL </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>instruction to pass control to the <i>callee</i>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The <i>callee </i>receives control,
and typically (although this is not actually necessary, in functions<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>which do not need to access their parameters) starts by saving the value
of </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ESP </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>in </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>EBP<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>so as to be able to use </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>EBP </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>as a base pointer to
find its parameters on the stack. However, the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>caller </span></i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>was probably doing this too, so part of the calling convention states
that </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>EBP </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>must be<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>preserved by any C function. Hence the <i>callee</i>, if it is going to
set up </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>EBP </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>as a frame pointer,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>must push the previous value first.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The <i>callee </i>may then access
its parameters relative to </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>EBP</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. The doubleword at </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>[EBP] </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>holds<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the previous value of </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>EBP </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>as it was pushed; the
next doubleword, at </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>[EBP+4]</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>, holds the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>return address, pushed implicitly by </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>CALL</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
The parameters start after that, at </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>[EBP+8]</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. The<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>leftmost parameter of the function, since it was pushed last, is accessible
at this offset from<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>EBP</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>; the others follow, at
successively greater offsets. Thus, in a function such as </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>printf<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>which takes a variable number of parameters, the pushing of the
parameters in reverse order<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>means that the function knows where to find its first parameter, which
tells it the number and<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>type of the remaining ones.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The <i>callee </i>may also wish to
decrease </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ESP </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>further, so as to allocate space on
the stack for<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>local variables, which will then be accessible at negative offsets from </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>EBP</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>The <i>callee</i>, if it wishes to
return a value to the <i>caller</i>, should leave the value in </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>AL</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>, </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>AX </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>or </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>EAX<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>depending on the size of the value. Floating-point results are typically
returned in </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ST0</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>Once the <i>callee </i>has finished
processing, it restores </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>ESP </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>from </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>EBP </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>if it had allocated local<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>stack space, then pops the previous value of </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>EBP</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>,
and returns via </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>RET </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>(equivalently, </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>RETN</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>When the <i>caller </i>regains
control from the <i>callee</i>, the function parameters are still on the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>stack, so it typically adds an immediate constant to </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>ESP </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>to remove them (instead of executing<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>a number of slow </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>POP </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>instructions). Thus, if
a function is accidentally called with the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>wrong number of parameters due to a prototype mismatch, the stack will
still be returned<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>to a sensible state since the <i>caller</i>, which <i>knows </i>how many
parameters it pushed, does the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>removing.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>8.2 Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>So after the two bytes are pushed onto the stack there is a </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>call </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>to the function </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>f </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>at
address </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0x1c</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This function first descreases </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>esp </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>with 4 bytes for local
use. Next the function makes local copies<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>of it’s function parameters. After that </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>a + b </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>is
being calculated and returned in register </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>eax</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>9 32-bit stack alignment<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Please notice that — even when the two parameters were pushed onto the
stack as bytes — the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>function reads then from the stack as if they were dwords! It seems as
if the processor pushes bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>in 32-bit mode as dword. This is because the stack is aligned onto
32-bit</span><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>2</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. This
is very important<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>to know when you have to write a 32-bit function in assembler following
the C calling convention<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>yourself.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>10 Other statements<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Of course we also could look on how GCC handles </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>for </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>loops,
</span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-GB'>while </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>loops, </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>if-else </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>statements<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>and </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>case </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>constructions, but this doesn’t
really matter when you want to write them yourself. And<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>if you don’t want to write them yourself it also doesn’t matter since
you don’t have to bother about<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>it.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>11 Conversions between fundamental data types<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In this part we will have a closer look at how the C compiler converts
the fundamental data types.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>These data types are:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>signed char and unsigned char (1
byte)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>signed short and unsigned short (2
bytes)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>signed int and unsigned int (4
bytes)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>First we will have a look on how the computer handles signed data types.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.1 Two’s complement<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The two’s complement representation of signed integers is used in the
Intel architecture <b>IA-32</b>. The<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>two’s complement representation of a nonnegative integer <i>n </i>is the
bit string obtained by writing <i>n<o:p></o:p></i></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>in base 2. If we take the bitwise complement of the bit string and add 1
to it, we obtain the two’s<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>complement representation of </span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><i><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>n</span></i><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. A machine that uses
the two’s complement representation as its<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>binary representation in memory for integral values is called a <i>two’s
complement machine</i>. Notice<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>that in the two’s complement representation 0 and </span><b><span
lang=EN-GB style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:
EN-GB'>_ </span></b><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>0
are being represented by the same binary<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>string containing all zeros. Example:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>0</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>10 </span><b><span lang=EN-GB style='font-size:1.0pt;font-family:Arial;
color:black;mso-ansi-language:EN-GB'>_ _ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>00000000</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>2<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ _ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>0</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>10 </span><b><span lang=EN-GB style='font-size:1.0pt;font-family:Arial;
color:black;mso-ansi-language:EN-GB'>_ _ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>00000000</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>2 </span><b><span lang=EN-GB style='font-size:1.0pt;font-family:Arial;
color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>1<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ _ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>11111111</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>2 </span><b><span lang=EN-GB style='font-size:1.0pt;font-family:Arial;
color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>1<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ _ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>00000000</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>2<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ _ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>0</span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:
EN-GB'>10<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Wherein </span><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_______ _ </span></b><i><span
lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:EN-GB'>x </span></i><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>stands for a number
represented in base <i>x</i>. Notice also that negative numbers<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>are characterized by having the high bit on. Of course you don’t have to
do the conversion to a<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>negative version of a certain number yourself. The </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>IA-32 </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>architecture has a specific instruction for<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>this, called </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>NEG</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. Table 1 shows us the
two’s complement representation of a char. The advantage<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Range<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>unsigned 128 </span><b><span lang=EN-GB style='font-size:1.0pt;
font-family:Arial;color:black;mso-ansi-language:EN-GB'>_____ </span></b><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>255 0 1 </span><b><span
lang=EN-GB style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:
EN-GB'>_____ </span></b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>127<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>signed -128 </span><b><span lang=EN-GB style='font-size:1.0pt;
font-family:Arial;color:black;mso-ansi-language:EN-GB'>_____ </span></b><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>-1 0 1 </span><b><span
lang=EN-GB style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:
EN-GB'>_____ </span></b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>127<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Table 1: The two’s complement of a char<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>of the two’s complement notation is that you can calculate with negative
numbers the same way as<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>with positive numbers.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.2 Assignments<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Here we will take a look at some C assignments and there result in
assembly. The used C program<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>is displayed below<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned int i = 251;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When we compile this to a plain binary file we get<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC04 sub esp,byte +0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745FCFB000000 mov dword
[ebp-0x4],0xfb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When we replace the used assignment with<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned int i = -5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>we get next instruction at address </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0x6<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745FCFBFFFFFF mov dword
[ebp-0x4],0xfffffffb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Now lets take a look at the signed integers. The statement<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i = 251;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>results in<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745FCFB000000 mov dword
[ebp-0x4],0xfb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>An the statements which uses a negative integer<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i = -5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>results in<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745FCFBFFFFFF mov dword
[ebp-0x4],0xfffffffb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Seems like signed and unsigned assignments are treated the same way.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.3 Conversion of signed char to signed int<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Here for we will study next little program:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>char c = -5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>i = c;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When we generate a binary file we get<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC08 sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C645FFFB mov byte
[ebp-0x1],0xfb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000A 0FBE45FF movsx eax,byte
[ebp-0x1]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E 8945F8 mov [ebp-0x8],eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000011 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000012 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>First we see at address </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>0x3 </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>the reservation of 8
bytes onto the stack for the local variables </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>c </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>and
</span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-GB'>i</span><span lang=EN-GB style='color:
black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The compiler takes 8 bytes to make it possible to align the integer </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>i</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. Next we see that the char </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>at </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>[ebp-0x1] </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>is being filled with </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>0xfb</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>, which of course represents </span><b><span
lang=EN-GB style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:
EN-GB'>_ </span></b><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>5.
(</span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-GB'>0xfb </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>= 251, 251 - 256 =<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>-5) Notice also that the compiler uses </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>[ebp-0x1] </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>instead of </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>[ebp-0x4]</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. This because of the <i>little<o:p></o:p></i></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>endian </span></i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>representation. The next instruction </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>movsx </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>does
the actual conversion from a signed char<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>to a signed integer. </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>MOVSX </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>sign-extends its source
(second) operand to the length of its destination<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>(first) operand, and copies the result into the destination operand</span><span
lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:EN-GB'>3</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. The last instruction
(before<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>leave) then writes the signed integer stored in </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>eax </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>to
int </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>i</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.4 Conversion of signed int to signed char<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Lets see at the opposite conversion.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>char c;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i = -5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>c = i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Notice that the statement </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>c = i </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>only make sense when the
value in </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>i </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>is between -128 and 127.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Because it has to be in the range of the signed char. Compilation
results into next binary file<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC08 sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745F8FBFFFFFF mov dword
[ebp-0x8],0xfffffffb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000000D 8A45F8 mov al,[ebp-0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000010 8845FF mov [ebp-0x1],al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000013 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000014 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0xfffffffb </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>is indeed </span><b><span
lang=EN-GB style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:
EN-GB'>_ </span></b><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>5.
When we only look at the less significant byte </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>0xfb </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>and
we move this<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>to a signed char, we also get </span><b><span lang=EN-GB
style='font-size:1.0pt;font-family:Arial;color:black;mso-ansi-language:EN-GB'>_
</span></b><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>5. So
for the conversion from a signed int to a signed char we can<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>use a simple </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>mov </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>instruction.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.5 Conversion of unsigned char to unsigned int<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Take a look at the C program<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned char c = 5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned int i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>i = c;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This will generate the binary file<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC08 sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C645FF05 mov byte
[ebp-0x1],0x5<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000A 0FB645FF movzx eax,byte
[ebp-0x1]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000E 8945F8 mov [ebp-0x8],eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000011 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000012 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We get the same binary file as for the conversion from signed char to
signed int except for the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>instruction at address </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>0xA</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. Here we have the
instruction </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>movzx</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>MOVZX </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>zero-extends
its source<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>(second) operand to the length of its destination (first) operand, and
copies the result into the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>destination operand.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.6 Conversion of unsigned int to unsigned char<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Here fore we did use the file<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned char c;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned int i = 251;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>c = i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Please notice again that the integer value is restricted from 0 to 255. This
because an unsigned<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>char can’t handle any bigger numbers. The accompanying binary file<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC08 sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745F8FB000000 mov dword
[ebp-0x8],0xfb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>0000000D 8A45F8 mov al,[ebp-0x8]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000010 8845FF mov [ebp-0x1],al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000013 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000014 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The actual conversion instruction, the </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>mov </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>instruction
at address </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0xD</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>, is the same as for the conversion<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>from signed integers to signed chars.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>11.7 Conversion of signed int to unsigned int<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The file<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int i = -5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>unsigned int u;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>u = i;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The binary<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 83EC08 sub esp,byte +0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000006 C745FCFBFFFFFF mov dword
[ebp-0x4],0xfffffffb<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000D 8B45FC mov eax,[ebp-0x4]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000010 8945F8 mov [ebp-0x8],eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000013 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000014 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Dissection<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>There is no specific conversion between signed and unsigned integers. The
only difference is when<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>you perform operations on the integers. Signed integers will have to use
instructions like </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>idiv</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>imul </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>where unsigned integers will use
the unsigned versions of there instructions being </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>div</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>,
</span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;
color:black;mso-ansi-language:EN-GB'>mul</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>12 Basic environment for GCC compiled code<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Because I can’t find any official documentation on this subject I tried
to figure it out for myself.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Here’s what I’ve got:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>32-bit mode, so protected mode with
enabled 32 bit code flag in GDT or LDT table.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>Segment registers CS, DS, ES, FS,
GS and SS have to point to the same memory area.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>(aliases)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>Because un-initialised global
variables are stored “right” after the code you have to keep a<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>little area free. This area is called the BSS section. Notice that
initialised global variables<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>are stored in the DATA section in the binary file itself right after the
code section. Variables<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>declared with </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>const </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>are stored in the RODATA
(read-only) section which is also part of the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>binary file itself.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:1.0pt;font-family:
Arial;color:black;mso-ansi-language:EN-GB'>_ </span></b><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>Make sure the stack can’t overwrite
the code and global variables.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In the Intel documentation[2] they refer to this as <b>Basic Flat Model</b></span><span
lang=EN-GB style='font-size:9.0pt;color:black;mso-ansi-language:EN-GB'>4</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. Don’t misunderstand
this.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We don’t have to use the <b>Basic Flat Model</b>. As long as the C
compiled binary has his </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>CS</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>, </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>DS </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>and<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>SS </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>pointing to the same memory area
(using aliases) everything will work. So we can use the full<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>multisegment protected paging model as long as every C compiled binary
has his <i>local </i>basic flat<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>memory model</span><span lang=EN-GB style='font-size:9.0pt;color:black;
mso-ansi-language:EN-GB'>5</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>13 Extern access to global variables<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In this section we will take a look on how to access global C variables <i>not
</i>from within the C<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>program. This is usefull when you load the C program with another
program (written in assembly)<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>which has to initialize some global variables of the C program. Of
course we could pass the<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>variables using the C program’s stack, but then these variables are
always stored on the stack which<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>was not the intention. We could also make a global variable table
somewhere in the memory at<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>a fixed point — so the C program has its address as a constant — but
then we have to use stupid<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>pointers to that table. So here is how we will do it. In the file </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>test.c </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>comes:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int myVar = 5;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>int main () {<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>}<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We compile this C program using:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>gcc -c test.c<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld -Map memmap.txt -Ttext 0x0 -e
main -oformat binary -N \<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:IT'>-o test.bin test.o<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ndisasm -b 32 test<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This gives us,<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000000 55 push ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000001 89E5 mov ebp,esp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000003 C9 leave<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>00000004 C3 ret<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000005 0000 add [eax],al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000007 00 db 0x00<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000008 05 db 0x05<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:IT'>00000009 0000 add [eax],al<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>0000000B 00 db 0x00<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>As you can see the variable </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>myVar </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>is stored at location </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>0x8</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. Now we have to get that address<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>from </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ld </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>using its memory map file </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>memmap.txt </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>which we did create using the parameter </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>-Map</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Herefore we use the command:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>cat memmap.txt | grep myVar | grep
-v ’\.o’ | \<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>sed ’s/ *//’ | cut -d’ ’ -f1<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This gives us our address of the variable </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>myVar </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>in
module </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>test.o</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0x00000008<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When we put this value in an environment variable (UNIX) </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>MYVAR</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>, we can use this to tell </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>nasm<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>where to look for the global C variable </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>myVar</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
Example:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>nasm -f bin -d MYVAR_ADDR=$MYVAR -o
init.bin init.asm<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>init.asm </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>the code which uses this directive
could look like:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>...<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>mov ax,CProgramSelector<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>mov es,ax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>mov eax,[TheValueThatMyVarShouldContain]<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>mov [es:MYVAR_ADDR],eax<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:blue;mso-ansi-language:EN-GB'>...<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>13.1 The size of the BSS section<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>When the C program is a kernel it has to know how big its BSS section is
for its memory management.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This size can also be extracted from the file </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>memmap.txt</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. Herefore we use:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>cat memmap.txt | grep ’\.bss ’ |
grep -v ’\.o’ | sed ’s/.*0x/0x/’<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>For our example </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>test.c </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>this gives us:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>0x0<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>We can pass this value like the way we did it for the global variables.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:14.5pt;color:black;
mso-ansi-language:EN-GB'>13.2 Global static variables<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In C there is no way to access </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>static </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>variables directly. This
is just because they are declared<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>as being </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>static</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>. This rule also applies to the
described external access method. When a global<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>variable is declared as </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>static </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>there is no address of
this variable in the memory map file generated<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>by the linker </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>ld</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. So we can’t determine
the address of this variable. The keyword </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>static </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>provides<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>us with a great protection mechanism.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>14 Implementation of ANSI C stdarg.h on IA-32<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>This header file provides the programmer with a portable means of
writing functions such as<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>printf </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>that have a variable number of
arguments. The header file contains one </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>typedef </span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>and<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>three macros</span><span lang=EN-GB style='font-size:9.0pt;color:black;
mso-ansi-language:EN-GB'>6</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. How these are implemented is system-dependent, but
on the IA-32 a possible implementation<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>is:<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>#ifndef STDARG_H<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>#define STDARG_H<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>typedef char*
va_list;<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>#define
va_rounded_size(type) \<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>(((sizeof (type)
+ sizeof (int) - 1) / sizeof (int)) * sizeof (int))<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:IT'>#define
va_start(ap, v) \<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>((void) (ap =
(va_list) &amp;v + va_rounded_size (v)))<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=IT style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:IT'>#define va_arg(ap,
type) \<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>(ap +=
va_rounded_size (type), *((type *)(ap - va_rounded_size (type))))<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>#define
va_end(ap) ((void) (ap = 0))<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;font-family:Courier;
mso-bidi-font-family:Arial;color:blue;mso-ansi-language:EN-GB'>#endif<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In the macro </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>va start</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>, the variable </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>v </span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>is the last argument that is declared in the header to
your<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>variable argument function definition. This variable cannot be of
storage class </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>register</span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>, and<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>it cannot be an array type or a type such as </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>char </span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>that
is widened by automatic conversions. The<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>macro </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>va start </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>initializes the argument pointer </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>ap</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>. The macro </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>va arg </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>accesses the next
argument<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>in the list. The macro </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>va end </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>performs any cleanup
that may be required before function exit.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>In the given implementation we’re using a macro </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>va rounded size</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. This macro is needed since<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>the IA-32 aligns the stack — which is used to pass us the variables of a
function — on 32-bit<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>boundaries, indicated by the statement </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>sizeof (int)</span><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>. The macro </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>va start </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>will let the argument<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>4 bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>4 bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>eip<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>4 bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>arg 0<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>ebp<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>ebp + 0x4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>ebp + 0x8<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>arg 1<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='font-size:11.0pt;color:black;
mso-ansi-language:EN-GB'>4 bytes<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Figure 2: The arguments on the IA-32 stack<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>pointer </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ap </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>point to the variable after the
given (first) variable </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>v</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>. This macro doesn’t
return anything<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>(indicated by the leading </span><span lang=EN-GB style='font-family:
Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>(void)</span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>).<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>The macro </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>va arg </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>first increases the argument
pointer </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ap </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>by the size of the given type </span><span
lang=EN-GB style='font-family:Courier;mso-bidi-font-family:Arial;color:black;
mso-ansi-language:EN-GB'>type</span><span lang=EN-GB style='color:black;
mso-ansi-language:EN-GB'>.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>After that it returns the next (actually the previous argument since the
argument pointer </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ap </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>first<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>did increase) argument on the stack of type </span><span lang=EN-GB
style='font-family:Courier;mso-bidi-font-family:Arial;color:black;mso-ansi-language:
EN-GB'>type</span><span lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>.
At first sight this way of handling seems very<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>weird but its the only way since we have to put the variable we want to
return at the end of a macro<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>definition, after the last comma.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Finally macro </span><span lang=EN-GB style='font-family:Courier;
mso-bidi-font-family:Arial;color:black;mso-ansi-language:EN-GB'>va end </span><span
lang=EN-GB style='color:black;mso-ansi-language:EN-GB'>will reset the argument
pointer </span><span lang=EN-GB style='font-family:Courier;mso-bidi-font-family:
Arial;color:black;mso-ansi-language:EN-GB'>ap </span><span lang=EN-GB
style='color:black;mso-ansi-language:EN-GB'>without returning anything.<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><b><span lang=EN-GB style='font-size:17.0pt;color:black;
mso-ansi-language:EN-GB'>References<o:p></o:p></span></b></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>[1] A Book on C<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Programming in C, fourth edition<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Addison-Wesley— ISBN 0-201-18399-4<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>[2] Intel Architecture Software Developer’s Manual<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Volume 1: Basic Architecture<o:p></o:p></span></i></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Order Number: 243190<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Volume 2: Instruction Set Reference Manual<o:p></o:p></span></i></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Order Number: 243191<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Volume 3: System Programming Guide<o:p></o:p></span></i></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>Order Number: 243192<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>[3] NASM documentation<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><i><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>http://www.cryogen.com/Nasm<o:p></o:p></span></i></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>[4] Manual Pages<o:p></o:p></span></p>

<p class=MsoNormal style='mso-pagination:none;mso-layout-grid-align:none;
text-autospace:none'><span lang=EN-GB style='color:black;mso-ansi-language:
EN-GB'>gcc, ld, objcopy, objdump</span><span lang=EN-GB style='font-size:10.0pt;
font-family:Arial;color:black;mso-ansi-language:EN-GB'><o:p></o:p></span></p>

</div>

</body>

</html>
