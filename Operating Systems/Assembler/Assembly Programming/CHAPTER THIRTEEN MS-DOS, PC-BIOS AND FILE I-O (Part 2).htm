<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0084)http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html -->
<HTML><HEAD><TITLE>CHAPTER THIRTEEN: MS-DOS, PC-BIOS AND FILE I/O (Part 2)</TITLE><!-- Generated by Harlequin WebMaker 2.2.6 (30-Apr-1996)Macintosh Common Lisp Version 3.0kp2p2 [AppGen 3.0b1kp2p2] -->
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<META http-equiv=pragma content=no-cache>
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#000000 link=#008000 bgColor=#ffffff topMargin=10 
stylesrc="../toc.html">
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="100%" colSpan=3>
      <P align=right><A name=top></A><FONT face=Arial size=1>The Art 
      of<BR></FONT><FONT face="Arial Black" size=1>ASSEMBLY LANGUAGE 
      PROGRAMMING</FONT></P></TD></TR>
  <TR>
    <TD vAlign=center noWrap align=middle width="100%" bgColor=#000000 colSpan=3 
    height=1><A name=HEADING2></A></TD></TR>
  <TR>
    <TD vAlign=center noWrap align=middle width="34%" bgColor=#ffffff>
      <P align=left><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-1.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 2)-Dateien/WB00823_.gif" 
      width=12 align=absMiddle border=0></A><FONT face=Arial size=2><STRONG> <A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-1.html">Chapter 
      Thirteen</A> (Part 1)</STRONG></FONT></P></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/toc.html"><FONT 
      face=Arial size=2><STRONG>Table of Content</STRONG></FONT></A></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff>
      <P align=right><FONT face=Arial size=2><STRONG><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html">Chapter 
      Thirteen</A> (Part 3)&nbsp; </STRONG></FONT><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 2)-Dateien/WB00827_.gif" 
      width=12 align=absMiddle 
border=0></A></P></TD></TR></TBODY></TABLE></CENTER></DIV>
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD noWrap width="100%" bgColor=#ffffff colSpan=2 height=10><A 
      name=HEADING2-1></A></TD></TR>
  <TR>
    <TD width="100%" bgColor=#f0f0f0 colSpan=2><FONT face=Arial 
      size=4><STRONG>CHAPTER THIRTEEN:<BR>MS-DOS, PC-BIOS AND FILE I/O (Part 
      2)</STRONG></FONT></TD></TR>
  <TR>
    <TD noWrap width="100%" colSpan=2 height=10></TD></TR>
  <TR>
    <TD vAlign=top width="50%"><FONT face=Arial size=2><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-1"><B>13.1 
      </B>- The IBM PC BIOS</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-7"><B>13.2 
      </B>- An Introduction to the BIOS' Services</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-24"><B>13.2.1 
      </B>- INT 5- Print Screen</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-30"><B>13.2.2 
      </B>- INT 10h - Video Services</A> </FONT></TD>
    <TD vAlign=top width="50%"><FONT face=Arial size=2><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-45"><B>13.2.3 
      </B>- INT 11h - Equipment Installed</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-67"><B>13.2.4 
      </B>- INT 12h - Memory Available</A> <BR><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-2.html#HEADING2-73"><B>13.2.5 
      </B>- INT 13h - Low Level Disk Services</A> </FONT></TD></TR>
  <TR>
    <TD noWrap width="100%" colSpan=2 height=20></TD></TR>
  <TR>
    <TD width="100%" colSpan=2><STRONG><FONT face=Arial size=3>13.1 The IBM PC 
      BIOS</FONT></STRONG></TD></TR>
  <TR>
    <TD noWrap width="100%" bgColor=#000000 colSpan=2 
height=1></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face=Arial size=2>Rather than place the BIOS routines at fixed memory 
locations in ROM, IBM used a much more flexible approach in the BIOS design. To 
call a BIOS routine, you use one of the 80x86's <CODE>int</CODE> software 
interrupt instructions. The <CODE>int </CODE>instruction uses the following 
syntax:</FONT></P>
<P><FONT face="Courier New" size=2>int value</FONT></P>
<P><FONT face=Arial size=2>Value is some number in the range 0..255. Execution 
of the <CODE>int </CODE>instruction will cause the 80x86 to transfer control to 
one of 256 different interrupt handlers. The interrupt vector table, starting at 
physical memory location 0:0, holds the addresses of these interrupt handlers. 
Each address is a full segmented address, requiring four bytes, so there are 
400h bytes in the interrupt vector table -- one segmented address for each of 
the 256 possible software interrupts. For example, <CODE>int 0 </CODE>transfers 
control to the routine whose address is at location 0:0, <CODE>int 1 
</CODE>transfers control to the routine whose address is at 0:4, int 2 via 0:8, 
<CODE>int 3 </CODE>via 0:C, and <CODE>int 4 </CODE>via 0:10.</FONT></P>
<P><FONT face=Arial size=2>When the PC resets, one of the first operations it 
does is initialize several of these interrupt vectors so they point at BIOS 
service routines. Later, when you execute an appropriate <CODE>int 
</CODE>instruction, control transfers to the appropriate BIOS code. </FONT></P>
<P><FONT face=Arial size=2>If all you're doing is calling BIOS routines (as 
opposed to writing them), you can view the <CODE>int </CODE>instruction as 
nothing more than a special <CODE>call </CODE>instruction. </FONT></P>
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD width="100%"><FONT face=Arial size=3><STRONG><A 
      name=HEADING2-7></A>13.2 An Introduction to the BIOS' 
      Services</STRONG></FONT></TD></TR>
  <TR>
    <TD noWrap width="100%" bgColor=#000000 
height=1></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face=Arial size=2>The IBM PC BIOS uses software interrupts 5 and 
10h..1Ah to accomplish various operations. Therefore, the <CODE>int 5</CODE>, 
and <CODE>int 10h</CODE>.. <CODE>int 1ah </CODE>instructions provide the 
interface to BIOS. The following table summarizes the BIOS services: </FONT></P>
<P><FONT face=Arial size=2>INT Function </FONT></P>
<P><FONT face=Arial size=2>5 Print Screen operation. </FONT></P>
<P><FONT face=Arial size=2>10h Video display services. </FONT></P>
<P><FONT face=Arial size=2>11h Equipment determination. </FONT></P>
<P><FONT face=Arial size=2>12h Memory size determination. </FONT></P>
<P><FONT face=Arial size=2>13h Diskette and hard disk services.</FONT></P>
<P><FONT face=Arial size=2>14h Serial I/O services.</FONT></P>
<P><FONT face=Arial size=2>15h Miscellaneous services.</FONT></P>
<P><FONT face=Arial size=2>16h Keyboard services.</FONT></P>
<P><FONT face=Arial size=2>17h Printer services.</FONT></P>
<P><FONT face=Arial size=2>18h BASIC.</FONT></P>
<P><FONT face=Arial size=2>19h Reboot.</FONT></P>
<P><FONT face=Arial size=2>1Ah Real time clock services.</FONT></P>
<P><FONT face=Arial size=2>Most of these routines require various parameters in 
the 80x86's registers. Some require additional parameters in certain memory 
locations. The following sections describe the exact operation of many of the 
BIOS routine.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING2-24></A>13.2.1 INT 5- Print 
Screen</FONT></STRONG></P><PRE><FONT face="Courier New" size=2>Instruction:    int 5h
BIOS Operation: Print the current text screen.
Parameters:     None</FONT></PRE>
<P><FONT face=Arial size=2>If you execute the <CODE>int 5h </CODE>instruction, 
the PC will send a copy of the screen image to the printer exactly as though 
you'd pressed the PrtSc key on the keyboard. In fact, the BIOS issues an 
<CODE>int 5 </CODE>instruction when you press the PrtSc, so the two operations 
are absolutely identical (other than one is under software control rather than 
manual control). Note that the 80286 and later also uses <CODE>int 5 </CODE>for 
the BOUNDS trap.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING2-30></A>13.2.2 INT 10h - 
Video Services</FONT></STRONG></P><PRE><FONT face="Courier New" size=2>Instruction:    int 10h
BIOS Operation: Video I/O Services
Parameters:     Several, passed in ax, bx, cx, dx, and es:bp registers.</FONT></PRE>
<P><FONT face=Arial size=2>The <CODE>int 10h </CODE>instruction does several 
video display related functions. You can use it to initialize the video display, 
set the cursor size and position, read the cursor position, manipulate a light 
pen, read or write the current display page, scroll the data in the screen up or 
down, read and write characters, read and write pixels in a graphics display 
mode, and write strings to the display. You select the particular function to 
execute by passing a value in the <CODE>ah </CODE>register. </FONT></P>
<P><FONT face=Arial size=2>The video services represent one of the largest set 
of BIOS calls available. There are many different video display cards 
manufactured for PCs, each with minor variations and often each having its own 
set of unique BIOS functions. The BIOS reference in the appendices lists some of 
the more common functions available, but as pointed out earlier, this list is 
quite incomplete and out of date given the rapid change in 
technology.</FONT></P>
<P><FONT face=Arial size=2>Probably the most commonly used video service call is 
the character output routine:</FONT></P><PRE><FONT face="Courier New" size=2>Name:           Write char to screen in TTY mode
Parameters      ah = 0Eh, al = ASCII code (In graphics mode, bl = Page number)</FONT></PRE>
<P><FONT face=Arial size=2>This routine writes a single character to the 
display. MS-DOS calls this routine to display characters on the screen. The UCR 
Standard Library also provides a call which lets you write characters directly 
to the display using BIOS calls.</FONT></P>
<P><FONT face=Arial size=2>Most BIOS video display routines are poorly written. 
There is not much else that can be said about them. They are extremely slow and 
don't provide much in the way of functionality. For this reason, most 
programmers (who need a high-performance video display driver) end up writing 
their own display code. This provides speed at the expense of portability. 
Unfortunately, there is rarely any other choice. If you need functionality 
rather than speed, you should consider using the ANSI.SYS screen driver provided 
with MS-DOS. This display driver provides all kinds of useful services such as 
clear to end of line, clear to end of screen, etc. For more information, consult 
your DOS manual.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE borderColor=#c0c0c0 cellSpacing=0 cellPadding=0 width="100%" border=1>
  <CAPTION><FONT face=Arial size=2><STRONG>BIOS Video Functions (Partial 
  List)</STRONG></FONT></CAPTION>
  <TBODY>
  <TR>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial size=2>AH</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Input<BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Output<BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
    size=2>Description</FONT></TH></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0</FONT></TD>
    <TD><FONT face=Arial size=2>al=mode</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Sets the video display mode.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>1</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ch</CODE>- Starting 
      line.<BR><BR><CODE>cl</CODE>- ending line</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Sets the shape of the cursor. Line values are 
      in the range 0..15. You can make the cursor disappear by loading 
      <CODE>ch</CODE> with 20h.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>2</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>bh</CODE>- page<BR><BR><CODE>dh</CODE>- 
      y coordinate<BR><BR><CODE>dl</CODE>- x coordinate</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Position cursor to location (x,y) on the 
      screen. Generally you would specify page zero. BIOS maintains a separate 
      cursor for each page.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>3</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>bh</CODE>- page</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ch</CODE>- starting 
      line<BR><BR><CODE>cl</CODE>- ending line<BR><BR><CODE>dl</CODE>- x 
      coordinate<BR><BR><CODE>dh</CODE>- y coordinate</FONT></TD>
    <TD><FONT face=Arial size=2>Get cursor position and shape.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>4</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Obsolete (Get Light Pen 
Position).</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>5</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- display page</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Set display page. Switches the text display 
      page to the specified page number. Page zero is the standard text page. 
      Most color adapters support up to eight text pages (0..7).</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>6</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al- </CODE>Number of lines to 
      scroll.<BR><BR><CODE>bh- </CODE>Screen attribute for cleared 
      area.<BR><BR><CODE>cl</CODE>- x coordinate UL<BR><BR><CODE>ch</CODE>- y 
      coordinate UL<BR><BR><CODE>dl</CODE>- x coordinate 
      LR<BR><BR><CODE>dh</CODE>- y coordinate LR</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Clear or scroll up. If <CODE>al</CODE> 
      contains zero, this function clears the rectangular portion of the screen 
      specified by <CODE>cl/ch</CODE> (the upper left hand corner) and 
      <CODE>dl/dh</CODE> (the lower right hand corner). If <CODE>al</CODE> 
      contains any other value, this service will scroll that rectangular window 
      up the number of lines specified in <CODE>al</CODE>.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>7</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al- </CODE>Number of lines to 
      scroll.<BR><BR><CODE>bh- </CODE>Screen attribute for cleared 
      area.<BR><BR><CODE>cl</CODE>- x coordinate UL<BR><BR><CODE>ch</CODE>- y 
      coordinate UL<BR><BR><CODE>dl</CODE>- x coordinate 
      LR<BR><BR><CODE>dh</CODE>- y coordinate LR</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Clear or scroll down. If <CODE>al</CODE> 
      contains zero, this function clears the rectangular portion of the screen 
      specified by <CODE>cl/ch</CODE> (the upper left hand corner) and 
      <CODE>dl/dh</CODE> (the lower right hand corner). If <CODE>al</CODE> 
      contains any other value, this service will scroll that rectangular window 
      down the number of lines specified in <CODE>al</CODE>.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>8</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>bh</CODE>- display page</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- char 
      read<BR><BR><CODE>ah</CODE>- char attribute</FONT></TD>
    <TD><FONT face=Arial size=2>Read character's ASCII code and attribute byte 
      from current screen position.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>9</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al- 
      </CODE>character<BR><BR><CODE>bh</CODE>- page<BR><BR><CODE>bl</CODE>- 
      attribute<BR><BR><CODE>cx</CODE>- # of times to replicate 
    character</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>This call writes cx copies of the character 
      and attribute in <CODE>al/bl</CODE> starting at the current cursor 
      position on the screen. It does not change the cursor's 
  position.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0Ah</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al- 
      </CODE>character<BR><BR><CODE>bh</CODE>- page</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Writes character in al to the current screen 
      position using the existing attribute. Does not change cursor 
      position.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0Bh</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>bh</CODE>- 0<BR><BR><CODE>bl</CODE>- 
      color</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Sets the border color for the text 
      display.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0Eh</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- 
      character<BR><BR><CODE>bh</CODE>- page</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2>Write a character to the screen. Uses existing 
      attribute and repositions cursor after write.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0Fh</FONT></TD>
    <TD><FONT face=Arial size=2>&nbsp;</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ah</CODE>- # 
      columns<BR><BR><CODE>al</CODE>- display mode<BR><BR><CODE>bh</CODE>- 
      page</FONT></TD>
    <TD><FONT face=Arial size=2>Get video 
mode</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face=Arial size=2>Note that there are many other BIOS 10h subfunctions. 
Mostly, these other functions deal with graphics modes (the BIOS is too slow for 
manipulating graphics, so you shouldn't use those calls) and extended features 
for certain video display cards. For more information on these calls, pick up a 
text on the PC's BIOS.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING2-45></A>13.2.3 INT 11h - 
Equipment Installed</FONT></STRONG></P><PRE><FONT face="Courier New" size=2>Instruction:    int 11h
BIOS Operation: Return an equipment list
Parameters:     On entry: None, on exit: AX contains equipment list</FONT></PRE>
<P><FONT face=Arial size=2>On return from <CODE>int 11h</CODE>, the AX register 
contains a bit-encoded equipment list with the following values:</FONT></P><PRE><FONT face="Courier New" size=2>Bit 0           Floppy disk drive installed
Bit 1           Math coprocessor installed
Bits 2,3                System board RAM installed (obsolete)
Bits 4,5                Initial video mode
                        00- none
                        01- 40x25 color
                        10- 80x25 color
                        11- 80x25 b/w
Bits 6,7                Number of disk drives
Bit 8           DMA present
Bits 9,10,11    Number of RS-232 serial cards installed
Bit 12          Game I/O card installed
Bit 13          Serial printer attached
Bits 14,15      Number of printers attached.</FONT></PRE>
<P><FONT face=Arial size=2>Note that this BIOS service was designed around the 
original IBM PC with its very limited hardware expansion capabilities. The bits 
returned by this call are almost meaningless today.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING2-67></A>13.2.4 INT 12h - 
Memory Available</FONT></STRONG></P><PRE><FONT face="Courier New" size=2>Instruction:    int 12h
 BIOS Operation:Determine memory size
Parameters:     Memory size returned in AX</FONT></PRE>
<P><FONT face=Arial size=2>Back in the days when IBM PCs came with up to 64K 
memory installed on the motherboard, this call had some meaning. However, PCs 
today can handle up to 64 megabytes or more. Obviously this BIOS call is a 
little out of date. Some PCs use this call for different purposes, but you 
cannot rely on such calls working on any machine.</FONT></P>
<P><STRONG><FONT face=Arial size=3><A name=HEADING2-73></A>13.2.5 INT 13h - Low 
Level Disk Services</FONT></STRONG></P><PRE><FONT face="Courier New" size=2>Instruction:    int 13h
BIOS Operation: Diskette Services
Parameters:     ax, es:bx, cx, dx (see below)</FONT></PRE>
<P><FONT face=Arial size=2>The <CODE>int 13h </CODE>function provides several 
different low-level disk services to PC programs: Reset the diskette system, get 
the diskette status, read diskette sectors, write diskette sectors, verify 
diskette sectors, and format a diskette track and many more. This is another 
example of a BIOS routine which has changed over the years. When this routine 
was first developed, a 10 megabyte hard disk was considered large. Today, a 
typical high performance game requires 20 to 30 megabytes of storage. 
</FONT></P>
<DIV align=center>
<CENTER>
<TABLE borderColor=#c0c0c0 cellSpacing=0 cellPadding=0 border=1>
  <CAPTION><FONT face=Arial size=2><STRONG>Some Common Disk Subsystem BIOS 
  Calls</STRONG></FONT></CAPTION>
  <TBODY>
  <TR>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial size=2>AH</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Input<BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
      size=2>Output<BR>Parameters</FONT></TH>
    <TH align=middle bgColor=#f0f0f0><FONT face=Arial 
    size=2>Description</FONT></TH></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive (0..7fh is floppy, 
      80h..ffh is hard)</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ah</CODE>- status (0 and carry clear if 
      no error, error code if error).</FONT></TD>
    <TD><FONT face=Arial size=2>Resets the specified disk drive. Resetting a 
      hard disk also resets the floppy drives.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>1</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive (as above)</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ah</CODE>- 0<BR><BR><CODE>al</CODE>- 
      status of previous disk operation.</FONT></TD>
    <TD><FONT face=Arial size=2>This call returns the following status values 
      in al:<BR><BR>0- no error<BR><BR>1- invalid command<BR><BR>2- address mark 
      not found<BR><BR>3- disk write protected<BR><BR>4- couldn't find 
      sector<BR><BR>5- reset error<BR><BR>6- removed media<BR><BR>7- bad 
      parameter table<BR><BR>8- DMA overrun<BR><BR>9- DMA operation crossed 64K 
      boundary<BR><BR>10- illegal sector flag<BR><BR>11- illegal track 
      flag<BR><BR>12- illegal media<BR><BR>13- invalid # of sectors<BR><BR>14- 
      control data address mark encountered<BR><BR>15- DMA error<BR><BR>16- CRC 
      data error<BR><BR>17- ECC corrected data error<BR><BR>32- disk controller 
      failed<BR><BR>64- seek error<BR><BR>128- timeout error<BR><BR>170- drive 
      not ready<BR><BR>187- undefined error<BR><BR>204- write error<BR><BR>224- 
      status error<BR><BR>255- sense failure</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>2</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>al</CODE>- # of sectors to 
      read<BR><BR><CODE>es:bx</CODE>- buffer address<BR><BR><CODE>cl</CODE>- 
      bits 0..5: sector #<BR><BR><CODE>cl</CODE>- bits 6/7- track bits 8 &amp; 
      9<BR><BR><CODE>ch</CODE>- track bits 0..7.<BR><BR><CODE>dl</CODE>- drive # 
      (as above)<BR><BR><CODE>dh</CODE>- bits 0..5: head 
      #<BR><BR><CODE>dh</CODE>- bits 6&amp;7: track bits 10 &amp; 11.</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ah</CODE>- return 
      status<BR><BR><CODE>al</CODE>- burst error length<BR><BR>carry- 0:success, 
      1:error</FONT></TD>
    <TD><FONT face=Arial size=2>Reads the specified number of 512 byte sectors 
      from the disk. Data read must be 64 Kbytes or less.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>3</FONT></TD>
    <TD><FONT face=Arial size=2>same as (2) above</FONT></TD>
    <TD><FONT face=Arial size=2>same as (2) above</FONT></TD>
    <TD><FONT face=Arial size=2>Writes the specified number of 512 byte 
      sectors to the disk. Data written must not exceed 64 Kbytes in 
      length.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>4</FONT></TD>
    <TD><FONT face=Arial size=2>Same as (2) above except there is no need for 
      a buffer.</FONT></TD>
    <TD><FONT face=Arial size=2>same as (2) above</FONT></TD>
    <TD><FONT face=Arial size=2>Verifies the data in the specified number of 
      512 byte sectors on the disk.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0Ch</FONT></TD>
    <TD><FONT face=Arial size=2>Same as (4) above except there is no need for 
      a sector #</FONT></TD>
    <TD><FONT face=Arial size=2>Same as (4) above</FONT></TD>
    <TD><FONT face=Arial size=2>Sends the disk head to the specified track on 
      the disk.</FONT></TD></TR>
  <TR>
    <TD align=middle><FONT face=Arial size=2>0Dh</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>dl</CODE>- drive # (80h or 
81h)</FONT></TD>
    <TD><FONT face=Arial size=2><CODE>ah</CODE>- return 
      status<BR><BR>carry-0:no error<BR><BR>1:error</FONT></TD>
    <TD><FONT face=Arial size=2>Reset the hard disk 
  controller</FONT></TD></TR></TBODY></TABLE></CENTER></DIV>
<P><FONT face=Arial size=2>Note: see appropriate BIOS documentation for 
additional information about disk subsystem BIOS support.</FONT></P>
<DIV align=center>
<CENTER>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
  <TBODY>
  <TR>
    <TD vAlign=center noWrap align=middle width="100%" bgColor=#000000 colSpan=3 
    height=1></TD></TR>
  <TR>
    <TD vAlign=center noWrap align=middle width="34%" bgColor=#ffffff>
      <P align=left><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-1.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 2)-Dateien/WB00823_.gif" 
      width=12 align=absMiddle border=0></A><FONT face=Arial size=2><STRONG> <A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-1.html">Chapter 
      Thirteen</A> (Part 1)</STRONG></FONT></P></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/toc.html"><FONT 
      face=Arial size=2><STRONG>Table of Content</STRONG></FONT></A></TD>
    <TD vAlign=center noWrap align=middle width="33%" bgColor=#ffffff>
      <P align=right><FONT face=Arial size=2><STRONG><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html">Chapter 
      Thirteen</A> (Part 3)&nbsp; </STRONG></FONT><A 
      href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/Chapter_13/CH13-3.html"><IMG 
      height=24 
      src="CHAPTER THIRTEEN MS-DOS, PC-BIOS AND FILE I-O (Part 2)-Dateien/WB00827_.gif" 
      width=12 align=absMiddle 
border=0></A></P></TD></TR></TBODY></TABLE></CENTER></DIV>
<P align=right><FONT face=Arial size=2><STRONG>Chapter Thirteen: MS-DOS, PC-BIOS 
and File I/O (Part 2)<BR>28 SEP 1996</STRONG></FONT></P></BODY></HTML>
